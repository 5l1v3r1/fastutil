/*		 
 * fastutil 2.52: Fast & compact specialized utility classes for Java
 *
 * Copyright (C) 2002, 2003 Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package it.unimi.dsi.fastutil;

import java.util.*;

/** A class providing static methods that do useful things with type-specific iterators.
 *
 * @see Iterator
 */

public class Iterators {

#include "BooleanIteratorsFragment.java"
#include "ByteIteratorsFragment.java"
#include "ShortIteratorsFragment.java"
#include "IntIteratorsFragment.java"
#include "LongIteratorsFragment.java"
#include "CharIteratorsFragment.java"
#include "FloatIteratorsFragment.java"
#include "DoubleIteratorsFragment.java"
#include "ObjectIteratorsFragment.java"

private static class EmptyIterator extends AbstractObjectListIterator implements 
	BooleanListIterator, ByteListIterator, ShortListIterator, IntListIterator,
	LongListIterator, CharListIterator, FloatListIterator, DoubleListIterator,
	ObjectListIterator {

	private static EmptyIterator singleton = new EmptyIterator();

	public static EmptyIterator getInstance() { return singleton; }

	private EmptyIterator() {}

	public boolean hasNext() { return false; }
	public boolean hasPrevious() { return false; }

	public boolean nextBoolean() { throw new NoSuchElementException(); }
	public boolean previousBoolean() { throw new NoSuchElementException(); }
	public byte nextByte() { throw new NoSuchElementException(); }
	public byte previousByte() { throw new NoSuchElementException(); }
	public short nextShort() { throw new NoSuchElementException(); }
	public short previousShort() { throw new NoSuchElementException(); }
	public int nextInt() { throw new NoSuchElementException(); }
	public int previousInt() { throw new NoSuchElementException(); }
	public long nextLong() { throw new NoSuchElementException(); }
	public long previousLong() { throw new NoSuchElementException(); }
	public char nextChar() { throw new NoSuchElementException(); }
	public char previousChar() { throw new NoSuchElementException(); }
	public float nextFloat() { throw new NoSuchElementException(); }
	public float previousFloat() { throw new NoSuchElementException(); }
	public double nextDouble() { throw new NoSuchElementException(); }
	public double previousDouble() { throw new NoSuchElementException(); }
	public Object next() { throw new NoSuchElementException(); }
	public Object previous() { throw new NoSuchElementException(); }

	public int nextIndex() { return 0; }
	public int previousIndex() { return -1; }

	public int skip( int n ) { return 0; };

	public void set( boolean x ) { throw new UnsupportedOperationException(); }
	public void add( boolean x ) { throw new UnsupportedOperationException(); }
	public void set( byte x ) { throw new UnsupportedOperationException(); }
	public void add( byte x ) { throw new UnsupportedOperationException(); }
	public void set( short x ) { throw new UnsupportedOperationException(); }
	public void add( short x ) { throw new UnsupportedOperationException(); }
	public void set( int x ) { throw new UnsupportedOperationException(); }
	public void add( int x ) { throw new UnsupportedOperationException(); }
	public void set( long x ) { throw new UnsupportedOperationException(); }
	public void add( long x ) { throw new UnsupportedOperationException(); }
	public void set( char x ) { throw new UnsupportedOperationException(); }
	public void add( char x ) { throw new UnsupportedOperationException(); }
	public void set( float x ) { throw new UnsupportedOperationException(); }
	public void add( float x ) { throw new UnsupportedOperationException(); }
	public void set( double x ) { throw new UnsupportedOperationException(); }
	public void add( double x ) { throw new UnsupportedOperationException(); }
}

#ifdef TEST

	public static void main( String arg[] ) {
	}

#endif

}

// Local Variables:
// mode: jde
// tab-width: 4
// End:
