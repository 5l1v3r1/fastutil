/*		 
 * fastUtil 1.12: Fast & compact specialized hash-based utility classes for Java
 *
 * Copyright (C) 2002 Sebastiano Vigna 
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2, or (at your option) any
 * later version.
 *	
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *	
 * You should have received a copy of the GNU General Public License along
 * with this program; see the file COPYING.  If not, write to the Free
 * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 */

package it.unimi.dsi.fastUtil;

import java.util.*;
import java.util.AbstractMap; // workaround to force @see/@link

/** A class inheriting methods from {@link AbstractMap} but
 * implementing a type-specific interface.
 *
 * @see AbstractSet
 */

public abstract class ABSTRACT_MAP extends AbstractMap implements MAP {

	 /** Puts all pairs in the given map.
	  * If the map implements the interface of this map,
	  * it uses the faster iterators.
	  *
	  * @param m a map.
	  */
	 
	 public void putAll(Map m) {
		  if (m instanceof MAP) {
				MAP.Entry e;
				for(Iterator i = m.entrySet().iterator(); i.hasNext(); ) {
					 e = (MAP.Entry)i.next();
					 put(e.ENTRY_GET_KEY(), e.ENTRY_GET_VALUE());
				}
		  }
		  else {
				Map.Entry e;
				for(Iterator i = m.entrySet().iterator(); i.hasNext(); ) {
					 e = (Map.Entry)i.next();
					 put(e.getKey(), e.getValue());
				}
		  } 
	 }

}
// Local Variables:
// mode: java
// End:
