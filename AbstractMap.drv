/*		 
 * fastUtil 2.0: Fast & compact specialized utility classes for Java
 *
 * Copyright (C) 2002 Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package it.unimi.dsi.fastUtil;

import java.util.*;

/** An abstract class providing basic methods for maps implementing a type-specific interface.
 */

public abstract class ABSTRACT_MAP implements MAP {


    /**
     * The default return value for <code>get()</code>, <code>put()</code> and
     * <code>remove()</code>.  
     */

    VALUE_TYPE defRetValue = VALUE_NULL;
	 
    
    public void setDefRetValue( final VALUE_TYPE rv ) {
	defRetValue = rv;
    }

    public VALUE_TYPE getDefRetValue() {
	return defRetValue;
    }


    public void defaultReturnValue( final VALUE_TYPE rv ) {
	defRetValue = rv;
    }

    public VALUE_TYPE defaultReturnValue() {
	return defRetValue;
    }


    /** Puts all pairs in the given map.
     * If the map implements the interface of this map,
     * it uses the faster iterators.
     *
     * @param m a map.
     */
	 
    public void putAll(Map m) {
	int n = m.size();
	Iterator i = m.entrySet().iterator();

	if (m instanceof MAP) {
	    MAP.Entry e;
	    while(n-- != 0) {
		e = (MAP.Entry)i.next();
		put(e.ENTRY_GET_KEY(), e.ENTRY_GET_VALUE());
	    }
	}
	else {
	    Map.Entry e;
	    while(n-- != 0) {
		e = (Map.Entry)i.next();
		put(e.getKey(), e.getValue());
	    }
	} 
    }


    /** Returns a hash code for this map.
     *
     * The hash code of a map is computed by summing the hash codes of its entries.
     *
     * @return a hash code for this map.
     */

    public int hashCode() {
	int h = 0, n = size();
	Iterator i = entrySet().iterator();

	while( n-- != 0 ) h += i.next().hashCode();
	return h;
    }

    public boolean equals(Object o) {
	if ( o == this ) return true;
	if ( ! ( o instanceof Map ) ) return false;

	Map m = (Map)o;
	if ( m.size() != size() ) return false;
	return entrySet().containsAll( m.entrySet() );
    }


    public String toString() {
	final StringBuffer s = new StringBuffer();
	final Iterator i = entrySet().iterator();
	int n = size();
	MAP.Entry e;
	boolean first = true;

	s.append("{");

	while(n-- != 0) {
	    if (first) first = false;
	    else s.append(", ");

	    e = (MAP.Entry)i.next();

#if #keyclass(Object)
	    if (this == e.getKey()) s.append("(this map)"); else
#endif
		s.append(String.valueOf(e.ENTRY_GET_KEY()));
	    s.append("=>");
#if #valueclass(Object)
	    if (this == e.getValue()) s.append("(this map)"); else
#endif
		s.append(String.valueOf(e.ENTRY_GET_VALUE()));
	}

	s.append("}");
	return s.toString();
    }
	 

}
// Local Variables:
// mode: java
// End:
