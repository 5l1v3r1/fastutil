/*		 
 * fastUtil 2.51: Fast & compact specialized utility classes for Java
 *
 * Copyright (C) 2002, 2003 Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package it.unimi.dsi.fastUtil;

import java.util.*;
import java.util.AbstractCollection; // workaround to force @see/@link

/** An abstract class providing basic methods for collections implementing a type-specific interface.
 *
 * <P>In particular, this class provide {@link #iterator()}, {@link #add(Object)}, {@link #remove(Object)} and
 * {@link #contains(Object)} methods that just call the type-specific counterpart. 
 */

public abstract class ABSTRACT_COLLECTION implements COLLECTION {


#if ! #keyclass(Object) && ! #keyclass(Reference)
	public KEY_TYPE[] toArray(KEY_TYPE a[]) {
		return TO_KEY_ARRAY(a);
	}


	public KEY_TYPE[] TO_KEY_ARRAY() {
		return TO_KEY_ARRAY(null);
	}
	 

	public KEY_TYPE[] TO_KEY_ARRAY( KEY_TYPE a[] ) {
		final KEY_TYPE result[];
		final KEY_ITERATOR i;
		int j, n;

		if ( a == null || a.length < size() ) result = new KEY_TYPE[ size() ];
		else result = a;

		j = 0;
		i = KEY_ITERATOR_METHOD();
		n = size();

		while( n-- != 0 ) result[ j++ ] = i.NEXT_KEY();

		return result;
	}

#endif

	public Object[] toArray() {
		return toArray( (Object[])null );
	}

	public Object[] toArray( Object a[] ) {
		final Object result[];
		final Iterator i;
		int j, n;

		if ( a == null || a.length < size() ) result = new Object[ size() ];
		else result = a;

		j = 0;
		i = iterator();
		n = size();

		while( n-- != 0 ) result[ j++ ] = i.next();

		return result;
	}

	/** Adds all elements of the given collection to this collection.
	 * If the collection is an instance of this class, it uses faster iterators.
	 *
	 * @param c a collection.
	 * @return <code>true</code> if this collection changed as a result of the call.
	 */

	public boolean addAll( Collection c ) {
		boolean retVal = false;
		final Iterator i = c.iterator();
		int n = c.size();

		if ( i instanceof KEY_ITERATOR ) {
			final KEY_ITERATOR j = (KEY_ITERATOR)i;
			while( n-- != 0 ) if ( add( j.NEXT_KEY() ) ) retVal = true;
		}
		else {
			while( n-- != 0 ) if ( add( i.next() ) ) retVal = true;
		}
		return retVal;
	}

	public boolean add( KEY_TYPE k ) {
		throw new UnsupportedOperationException();
	}
	 
	public boolean remove( KEY_TYPE k ) {
		throw new UnsupportedOperationException();
	}

#if ! #keyclass(Object) && ! #keyclass(Reference)
	/** A commodity method that delegates to the corresponding type-specific method. */
	public Iterator iterator() {
		return KEY_ITERATOR_METHOD();
	}

	/** A commodity method that delegates to the corresponding type-specific method. */
	public boolean add( Object o ) {
		return add( KEY2TYPE( o ) );
	}

	/** A commodity method that delegates to the corresponding type-specific method. */
	public boolean remove( final Object o ) {
		return remove( KEY2TYPE( o ) );
	}

	/** A commodity method that delegates to the corresponding type-specific method. */
	public boolean contains( final Object o ) {
		return contains( KEY2TYPE( o ) );
	}
#endif

	/** Checks whether this collection contains all elements from the given collection.
	 * If the collection is an instance of this class, it uses faster iterators.
	 *
	 * @param c a collection.
	 * @return <code>true</code> if this collection contains all elements of the argument.
	 */

	public boolean containsAll(Collection c) {
		final Iterator i = c.iterator();
		int n = c.size();

		if (i instanceof KEY_ITERATOR) {
			final KEY_ITERATOR j = (KEY_ITERATOR)i;
			while(n-- != 0) if (!contains(j.NEXT_KEY())) return false;
		}
		else {
			while(n-- != 0) if (!contains(i.next())) return false;
		}

		return true;
	}


	/** Retains in this collection only elements from the given collection.
	 * If the collection is an instance of this class, it uses faster iterators.
	 *
	 * @param c a collection.
	 * @return <code>true</code> if this collection changed as a result of the call.
	 */

	public boolean retainAll(Collection c) {
		boolean retVal = false;
		int n = size();

		if (c instanceof COLLECTION) {
			final COLLECTION d = (COLLECTION)c;
			final KEY_ITERATOR i = KEY_ITERATOR_METHOD();

			while(n-- != 0) {
				if (!d.contains(i.NEXT_KEY())) {
					i.remove();
					retVal = true;
				}
			}
		}
		else {
			final Iterator i = iterator();
			while(n-- != 0) {
				if (!c.contains(i.next())) {
					i.remove();
					retVal = true;
				}
			}
		}
		return retVal;
	}

	/** Remove from this collection all elements in the given collection.
	 * If the collection is an instance of this class, it uses faster iterators.
	 *
	 * @param c a collection.
	 * @return <code>true</code> if this collection changed as a result of the call.
	 */

	public boolean removeAll(Collection c) {
		boolean retVal = false;
		int n = size();

		if (c instanceof COLLECTION) {
			final COLLECTION d = (COLLECTION)c;
			final KEY_ITERATOR i = KEY_ITERATOR_METHOD();

			while(n-- != 0) {
				if (d.contains(i.NEXT_KEY())) {
					i.remove();
					retVal = true;
				}
			}
		}
		else {
			final Iterator i = iterator();
			while(n-- != 0) {
				if (c.contains(i.next())) {
					i.remove();
					retVal = true;
				}
			}
		}
		return retVal;
	}

	public boolean isEmpty() {
		return size() != 0;
	}

	public String toString() {
		final StringBuffer s = new StringBuffer();
		final KEY_ITERATOR i = KEY_ITERATOR_METHOD();
		int n = size();
		KEY_TYPE k;
		boolean first = true;

		s.append("{");

		while(n-- != 0) {
			if (first) first = false;
			else s.append(", ");
			k = i.NEXT_KEY();
#if #keyclass(Object) || #keyclass(Reference)
			if (this == k) s.append("(this collection)"); else
#endif
				s.append(String.valueOf(k));
		}

		s.append("}");
		return s.toString();
	}
	 
}

// Local Variables:
// mode: jde
// tab-width: 4
// End:
