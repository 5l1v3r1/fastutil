/*
 * Copyright (C) 2002 Sebastiano Vigna 
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2, or (at your option) any
 * later version.
 *	
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *	
 * You should have received a copy of the GNU General Public License along
 * with this program; see the file COPYING.  If not, write to the Free
 * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 */

package it.unimi.dsi.fastUtil;

import java.util.*;
import java.util.AbstractCollection; // workaround to force @see/@link

/** A class inheriting methods from {@link AbstractCollection} but
 * implementing a type-specific interface.
 *
 * @see AbstractCollection
 */

public abstract class ABSTRACT_COLLECTION_NAME extends AbstractCollection implements COLLECTION_NAME {

	 /* This code is a dup of that for sets due to the lack of multiple
	 inheritance. */

#if !#keyclass(Object)
	 public KEY_TYPE[] toArray(KEY_TYPE a[]) {
		  return TO_KEY_TYPE_CAP_ARRAY(a);
	 }
#endif


    public KEY_TYPE[] TO_KEY_TYPE_CAP_ARRAY() {
		  return TO_KEY_TYPE_CAP_ARRAY(null);
	 }
	 

    public KEY_TYPE[] TO_KEY_TYPE_CAP_ARRAY( KEY_TYPE a[] ) {
		  final KEY_TYPE result[];
		  final KEY_ITERATOR_NAME i;
		  int j;

		  if (a == null || a.length < size()) result = new KEY_TYPE[size()];
		  else result = a;

		  j = 0;
		  i = (KEY_ITERATOR_NAME)iterator();

		  while(i.hasNext()) a[j++] = i.NEXT_KEY_TYPE_CAP();

		  return result;
    }

}

// Local Variables:
// mode: java
// End:
