/*		 
 * fastutil: Fast & compact type-specific collections for Java
 *
 * Copyright (C) 2009 Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package PACKAGE;

import java.util.List;
import it.unimi.dsi.fastutil.BigList;

#if ! #keyclass(Reference)

/** A type-specific {@link BigList}; provides some additional methods that use polymorphism to avoid (un)boxing. 
 *
 * <P>Additionally, this interface strengthens {@link #listIterator()},
 * {@link #listIterator(int)} and {@link #subList(int,int)}.
 *
 * <P>Besides polymorphic methods, this interfaces specifies methods to copy into an array or remove contiguous
 * sublists. Although the abstract implementation of this interface provides simple, one-by-one implementations
 * of these methods, it is expected that concrete implementation override them with optimized versions.
 *
 * @see List
 */

public interface BIG_LIST KEY_GENERIC extends LIST2 KEY_GENERIC, BIG_LIST2 KEY_GENERIC, Comparable<List<? extends KEY_GENERIC_CLASS>> {
#else

/** A type-specific {@link BigList}; provides some additional methods that use polymorphism to avoid (un)boxing. 
 *
 * <P>Additionally, this interface strengthens {@link #iterator()}, {@link #listIterator()},
 * {@link #listIterator(int)} and {@link #subList(int,int)}.
 *
 * <P>Besides polymorphic methods, this interfaces specifies methods to copy into an array or remove contiguous
 * sublists. Although the abstract implementation of this interface provides simple, one-by-one implementations
 * of these methods, it is expected that concrete implementation override them with optimized versions.
 *
 * @see List
 */

public interface BIG_LIST KEY_GENERIC extends LIST2 KEY_GENERIC, BIG_LIST2 KEY_GENERIC {
#endif

	/** Returns a type-specific list iterator on the list.
	 *
	 * @see List#iterator()
	 */
	KEY_BIG_LIST_ITERATOR KEY_GENERIC iterator();

	/** Returns a type-specific list iterator on the list.
	 *
	 * @see List#listIterator()
	 */
	KEY_BIG_LIST_ITERATOR KEY_GENERIC listIterator();

	/** Returns a type-specific list iterator on the list starting at a given index.
	 *
	 * @see BigList#listIterator(long)
	 */
	KEY_BIG_LIST_ITERATOR KEY_GENERIC listIterator( long index );

	/** Returns a type-specific list iterator on the list starting at a given index.
	 *
	 * @see List#listIterator(int)
	 */
	KEY_BIG_LIST_ITERATOR KEY_GENERIC listIterator( int index );

	/** Returns a type-specific view of the portion of this list from the index <code>from</code>, inclusive, to the index <code>to</code>, exclusive.
	 *
	 * <P>Note that this specification strengthens the one given in {@link List#subList(int,int)}.
	 *
	 * @see List#subList(int,int)
	 */
	BIG_LIST KEY_GENERIC subList( long from, long to );

	/** Sets the size of this list.
	 *
	 * <P>If the specified size is smaller than the current size, the last elements are
	 * discarded. Otherwise, they are filled with 0/<code>null</code>/<code>false</code>.
	 *
	 * @param size the new size.
	 */

	void size( long size );

	/** Copies (hopefully quickly) elements of this type-specific list into the given array.
	 *
	 * @param from the start index (inclusive).
	 * @param a the destination array.
	 * @param offset the offset into the destination array where to store the first element copied.
	 * @param length the number of elements to be copied.
	 */
	void getElements( long from, KEY_TYPE a[], int offset, int length );

	/** Removes (hopefully quickly) elements of this type-specific list.
	 *
	 * @param from the start index (inclusive).
	 * @param to the end index (exclusive).
	 */
	void removeElements( long from, long to );

	/** Add (hopefully quickly) elements to this type-specific list.
	 *
	 * @param index the index at which to add elements.
	 * @param a the array containing the elements.
	 */
	void addElements( long index, KEY_GENERIC_TYPE a[] );

	/** Add (hopefully quickly) elements to this type-specific list.
	 *
	 * @param index the index at which to add elements.
	 * @param a the array containing the elements.
	 * @param offset the offset of the first element to add.
	 * @param length the number of elements to add.
	 */
	void addElements( long index, KEY_GENERIC_TYPE a[], int offset, int length );

#if #keys(primitive)

	/**
	 * @see List#add(int,Object)
	 */
	void add( long index, KEY_TYPE key );

	/**
	 * @see List#addAll(int,java.util.Collection)
	 */
	boolean addAll( long index, COLLECTION c );

	/**
	 * @see List#add(int,Object)
	 */
	boolean addAll( long index, LIST c );

	/**
	 * @see BigList#get(long)
	 */
	KEY_TYPE GET_KEY( long index );

	/**
	 * @see BigList#bigIndexOf(Object)
	 */
	long bigIndexOf( KEY_TYPE k );

	/**
	 * @see BigList#lastBigIndexOf(Object)
	 */
	long lastBigIndexOf( KEY_TYPE k );

	/**
	 * @see BigList#remove(long)
	 */
	KEY_TYPE REMOVE_KEY( long index );

	/**
	 * @see BigList#set(long,Object)
	 */
	KEY_TYPE set( long index, KEY_TYPE k );

#endif


}
