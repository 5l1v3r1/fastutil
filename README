Welcome to fastutil, a collection of type-specific Java classes that
provide maps, sets, lists and prority queues, implementing the
interfaces of the java.util package.

fastutil provides a huge collection of specialized classes generated starting
from a parameterized version; the classes are much more compact and much faster
than the general ones. Please read the package documentation for more
information.

The compiled code is contained in the jar file, and should be installed where
you keep Java extensions. Note that the jar file is huge, due to the large
number of classes: if you plan to ship your own jar with some fastutil classes
included, you should look at AutoJar to extract automatically the necessary
classes.

The Java sources are generated using a C preprocessor. The gencsource.sh script
reads in a driver file, that is, a Java source that uses some
preprocessor-defined symbols and some conditional compilation, and produces a
(fake) C source, which includes the driver code and some #define that customize
the environment.  You have to "make sources" to get the actual Java
sources; finally, "ant jar" and and "javadoc" will generate the jar file and
the API documentation. Note that you need ant (http://jakarta.apache.org/ant/).

If you define the TEST make variable (e.g., make sources TEST=1), a main method
will be compiled in each class: it performs a behavioral test or a speed test
on n elements, when called with arguments "test n [f]" or "speedTest n [f]",
respectively (the optional argument f is the load factor for hash-based
classes). Using "speedComp n [f]" will perform a speed test, but the same test
will be performed on the standard java.util class first. You should use a
server-type JVM if available.

The tests are repeated several times, and the first data is discarded (it is
just used to warm up the JVM). They include adding elements (Add/Put), 
removing existing (RemYes) and non-existing entries (RemNo), enquiring existing
(Yes) and non-existing entries (No), iterating forward (IterFor) and, where
available, backward (IterBack).

                                          seba (vigna@acm.org)
