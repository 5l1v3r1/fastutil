Welcome to fastUtil 2.1, a collection of specialised Java classes that
implement the Map and Set interfaces of the java.util package.

fastUtil provides a huge collection of specialised map classes generated
starting from a parameterised version; the classes are much more compact and
much faster than the general ones. Please read the package documentation for
more information.

The compiled code is contained in fastUtil.jar, and should be installed where
you keep Java extensions. 

NOTE: fastUtil 2.0 broke source-code compatibility with previous versions, as
(almost) all classes got new names, but you can keep your old (<2.0) fastUtil
jar around with another name (say, fastUtil13.jar) to get a smooth transition.

The Java sources are generated using a C preprocessor. The gencsources.sh
script will generate the (fake) C sources from the driver files. They include
the driver code and some #define that customise the environment.  Then, you
have to "make jar" to get the actual Java sources and the jar file and "make
docs" to create the API documentation. Note that you need ant
(http://jakarta.apache.org/ant/).

If you define the TEST make variable (e.g., make jar TEST=1), a main method
will be compiled in each class: it performs a regression test or a speed test
on n elements, when called with arguments "regressionTest n [f]" or "speedTest
n [f]", respectively (the optional argument f is the load factor for hash-based
classes). Using "speedComp n [f]" will perform a speed test, but the same test
will be performed on the standard java.util class first. You should use a
server-type JVM if available.

The tests are repeated several times, and the first data is discarded (it is
just used to warm up the JVM). They include adding elements (Add/Put), 
removing existing (RemYes) and non-existing entries (RemNo), enquiring existing
(Yes) and non-existing entries (No), iterating forward (IterFor) and, where
available, backward (IterBack).

                                          seba (vigna@acm.org)
