/*		 
 * fastdata: Fast & compact type-specific data structures for Java
 *
 * Copyright (C) 2002, 2003 Paolo Boldi and Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package PACKAGE;

#if #keyclass(Object)
import it.unimi.dsi.fastutil.AbstractPriorityQueue;
#endif

import java.util.NoSuchElementException;
import java.util.Comparator;

/** A type-specific {@link it.unimi.dsi.fastutil.PriorityQueue}; provides some additional methods that use polymorphism to reduce type juggling. 
 */

public class HEAP_PRIORITY_QUEUE extends ABSTRACT_PRIORITY_QUEUE {

	/** The backing array. */
	protected KEY_TYPE heap[] = ARRAYS.EMPTY_ARRAY;

	/** The number of elements in this heap. */
	protected int size;
	
	/** The type-specific comparator used in this heap. */
	protected KEY_COMPARATOR c;

	/** Creates a new empty heap without elements with a given capacity and comparator.
	 *
	 * @param capacity the initial capacity of this heap.
	 * @param c the comparator used in this heap, or <code>null</code> for the natural order.
	 */
	public HEAP_PRIORITY_QUEUE( int capacity, KEY_COMPARATOR c ) {
		if ( capacity > 0 ) this.heap = new KEY_TYPE[ capacity ];
		this.c = c;
	}

	/** Creates a new empty heap without elements and a given capacity.
	 *
	 * @param capacity the initial capacity of this heap.
	 */
	public HEAP_PRIORITY_QUEUE( int capacity ) {
		this( capacity, null );
	}

	/** Creates a new empty heap without elements and a given comparator.
	 *
	 * @param c the comparator used in this heap, or <code>null</code> for the natural order.
	 */
	public HEAP_PRIORITY_QUEUE( KEY_COMPARATOR c ) {
		this( 0, c );
	}

	/** Creates a new empty heap without elements. 
	 */
	public HEAP_PRIORITY_QUEUE() {
		this( 0, null );
	}

	private void ensureNonEmpty() {
		if ( size == 0 ) throw new NoSuchElementException();
	}

	public void enqueue( KEY_TYPE x ) {
		if ( size == heap.length ) heap = ARRAYS.grow( heap, size + 1 );

		heap[ size++ ] = x;
		HEAPS.upHeap( heap, size, size - 1, c );
	}

	public KEY_TYPE DEQUEUE() {
		ensureNonEmpty();

		final KEY_TYPE result = heap[ 0 ];
		heap[ 0 ] = heap[ --size ];
#if #keyclass(Object)
		heap[ size ] = null;
#endif
		HEAPS.downHeap( heap, size, 0, c );
		return result;
	}

	public KEY_TYPE FIRST() {
		ensureNonEmpty();
		return heap[ 0 ];
	}

	public void changed() {
		HEAPS.downHeap( heap, size, 0, c );
	}

	public int size() { return size; }

	public void clear() { 
#if #keyclass(Object)
		ObjectArrays.fill( heap, 0, size, null );
#endif
		size = 0; 
	}

	/** Trims the backing array so that it has exactly {@link #size()} elements.
	 */

	public void trim() {
		heap = ARRAYS.trim( heap, size );
	}

	public Comparator comparator() { return c; }
}

// Local Variables:
// mode: jde
// tab-width: 4
// End:
