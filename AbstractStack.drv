/*		 
 * fastutil: Fast & compact type-specific collections for Java
 *
 * Copyright (C) 2002, 2003, 2004, 2005, 2006 Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package PACKAGE;

import it.unimi.dsi.fastutil.AbstractStack;

/** An abstract class providing basic methods for implementing a type-specific stack interface.
 *
 * <P>To create a type-specific stack, you need both object methods and
 * primitive-type methods. However, if you inherit from this class you need
 * just one (anyone).
 */

public abstract class ABSTRACT_STACK extends AbstractStack implements STACK {

	protected ABSTRACT_STACK() {}

	/** Delegates to the corresponding type-specific method. */
	public void push( Object o ) {
		push( KEY2TYPE( o ) ); 
	}

	/** Delegates to the corresponding type-specific method. */
	public Object pop() {
		return KEY2OBJ( POP() ); 
	}

	/** Delegates to the corresponding type-specific method. */
	public Object top() {
		return KEY2OBJ( TOP() ); 
	}

	/** Delegates to the corresponding type-specific method. */
	public Object peek( int i ) {
		return KEY2OBJ( PEEK( i ) ); 
	}

	/** Delegates to the corresponding generic method. */
	public void push( KEY_TYPE k ) {
		push( KEY2OBJ( k ) ); 
	}

	/** Delegates to the corresponding generic method. */
	public KEY_TYPE POP() {
		return KEY2TYPE( pop() ); 
	}

	/** Delegates to the corresponding generic method. */
	public KEY_TYPE TOP() {
		return KEY2TYPE( top() ); 
	}

	/** Delegates to the corresponding generic method. */
	public KEY_TYPE PEEK( int i ) {
		return KEY2TYPE( peek( i ) ); 
	}
}

// Local Variables:
// mode: jde
// tab-width: 4
// End:
