/*		 
 * fastutil: Fast & compact type-specific collections for Java
 *
 * Copyright (C) 2002, 2003 Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package it.unimi.dsi.fastutil;

import it.unimi.dsi.fastutil.booleans.*;
import it.unimi.dsi.fastutil.bytes.*;
import it.unimi.dsi.fastutil.shorts.*;
import it.unimi.dsi.fastutil.chars.*;
import it.unimi.dsi.fastutil.ints.*;
import it.unimi.dsi.fastutil.longs.*;
import it.unimi.dsi.fastutil.floats.*;
import it.unimi.dsi.fastutil.doubles.*;
import it.unimi.dsi.fastutil.objects.*;

import it.unimi.dsi.fastutil.Iterators;
import it.unimi.dsi.fastutil.Arrays;

import java.util.*;

/** A class providing static methods that do useful things with type-specific collections.
 *
 * @see Collections
 */

public class Collections {

	private Collections() {}

	private abstract static class EmptyCollection extends AbstractObjectCollection implements 
	   BooleanCollection, ByteCollection, ShortCollection, IntCollection, LongCollection, CharCollection,
	   FloatCollection, DoubleCollection, ObjectCollection, ReferenceCollection {
		
		protected EmptyCollection() {}

		public boolean add( boolean k ) { throw new UnsupportedOperationException(); }
		public boolean add( byte k ) { throw new UnsupportedOperationException(); }
		public boolean add( char k ) { throw new UnsupportedOperationException(); }
		public boolean add( short k ) { throw new UnsupportedOperationException(); }
		public boolean add( int k ) { throw new UnsupportedOperationException(); }
		public boolean add( long k ) { throw new UnsupportedOperationException(); }
		public boolean add( float k ) { throw new UnsupportedOperationException(); }
		public boolean add( double k ) { throw new UnsupportedOperationException(); }
           
		public boolean addAll( BooleanList c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( ByteList c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( CharList c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( ShortList c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( IntList c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( LongList c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( FloatList c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( DoubleList c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
           
		public boolean addAll( BooleanCollection c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( ByteCollection c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( CharCollection c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( ShortCollection c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( IntCollection c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( LongCollection c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( FloatCollection c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( DoubleCollection c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
           
		public boolean removeAll( BooleanCollection c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean removeAll( ByteCollection c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean removeAll( CharCollection c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean removeAll( ShortCollection c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean removeAll( IntCollection c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean removeAll( LongCollection c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean removeAll( FloatCollection c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean removeAll( DoubleCollection c ) { if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
           
		public boolean containsAll( BooleanCollection c ) { return c.isEmpty(); }
		public boolean containsAll( ByteCollection c ) { return c.isEmpty(); }
		public boolean containsAll( CharCollection c ) { return c.isEmpty(); }
		public boolean containsAll( ShortCollection c ) { return c.isEmpty(); }
		public boolean containsAll( IntCollection c ) { return c.isEmpty(); }
		public boolean containsAll( LongCollection c ) { return c.isEmpty(); }
		public boolean containsAll( FloatCollection c ) { return c.isEmpty(); }
		public boolean containsAll( DoubleCollection c ) { return c.isEmpty(); }
           
		public boolean retainAll( BooleanCollection c ) { return false; }
		public boolean retainAll( ByteCollection c ) { return false; }
		public boolean retainAll( CharCollection c ) { return false; }
		public boolean retainAll( ShortCollection c ) { return false; }
		public boolean retainAll( IntCollection c ) { return false; }
		public boolean retainAll( LongCollection c ) { return false; }
		public boolean retainAll( FloatCollection c ) { return false; }
		public boolean retainAll( DoubleCollection c ) { return false; }
           
		public boolean remove( boolean k ) { throw new UnsupportedOperationException(); }
		public boolean remove( byte k ) { throw new UnsupportedOperationException(); }
		public boolean remove( char k ) { throw new UnsupportedOperationException(); }
		public boolean remove( short k ) { throw new UnsupportedOperationException(); }
		public boolean rem( int k ) { throw new UnsupportedOperationException(); }
		public boolean remove( long k ) { throw new UnsupportedOperationException(); }
		public boolean remove( float k ) { throw new UnsupportedOperationException(); }
		public boolean remove( double k ) { throw new UnsupportedOperationException(); }
           
		public boolean contains( boolean k ) { return false; }
		public boolean contains( byte k ) { return false; }
		public boolean contains( char k ) { return false; }
		public boolean contains( short k ) { return false; }
		public boolean contains( int k ) { return false; }
		public boolean contains( long k ) { return false; }
		public boolean contains( float k ) { return false; }
		public boolean contains( double k ) { return false; }
		public boolean contains( Object k ) { return false; }
           
		public boolean[] toBooleanArray() { return Arrays.BOOLEAN_EMPTY_ARRAY; }
		public byte[] toByteArray() { return Arrays.BYTE_EMPTY_ARRAY; }
		public char[] toCharArray() { return Arrays.CHAR_EMPTY_ARRAY; }
		public short[] toShortArray() { return Arrays.SHORT_EMPTY_ARRAY; }
		public int[] toIntArray() { return Arrays.INT_EMPTY_ARRAY; }
		public long[] toLongArray() { return Arrays.LONG_EMPTY_ARRAY; }
		public float[] toFloatArray() { return Arrays.FLOAT_EMPTY_ARRAY; }
		public double[] toDoubleArray() { return Arrays.DOUBLE_EMPTY_ARRAY; }

		public boolean[] toBooleanArray( boolean[] a ) { return a; }
		public byte[] toByteArray( byte[] a ) { return a; }
		public char[] toCharArray( char[] a ) { return a; }
		public short[] toShortArray( short[] a ) { return a; }
		public int[] toIntArray( int[] a ) { return a; }
		public long[] toLongArray( long[] a ) { return a; }
		public float[] toFloatArray( float[] a ) { return a; }
		public double[] toDoubleArray( double[] a ) { return a; }

		public boolean[] toArray( boolean[] a ) { return a; }
		public byte[] toArray( byte[] a ) { return a; }
		public char[] toArray( char[] a ) { return a; }
		public short[] toArray( short[] a ) { return a; }
		public int[] toArray( int[] a ) { return a; }
		public long[] toArray( long[] a ) { return a; }
		public float[] toArray( float[] a ) { return a; }
		public double[] toArray( double[] a ) { return a; }

		public BooleanIterator booleanIterator() { return Iterators.BOOLEAN_EMPTY_ITERATOR; }
		public ByteIterator byteIterator() { return Iterators.BYTE_EMPTY_ITERATOR; }
		public CharIterator charIterator() { return Iterators.CHAR_EMPTY_ITERATOR; }
		public ShortIterator shortIterator() { return Iterators.SHORT_EMPTY_ITERATOR; }
		public IntIterator intIterator() { return Iterators.INT_EMPTY_ITERATOR; }
		public LongIterator longIterator() { return Iterators.LONG_EMPTY_ITERATOR; }
		public FloatIterator floatIterator() { return Iterators.FLOAT_EMPTY_ITERATOR; }
		public DoubleIterator doubleIterator() { return Iterators.DOUBLE_EMPTY_ITERATOR; }
		public ObjectIterator objectIterator() { return Iterators.EMPTY_ITERATOR; }
		public ObjectIterator referenceIterator() { return Iterators.EMPTY_ITERATOR; }
		public Iterator iterator() { return Iterators.EMPTY_ITERATOR; }

		public int size() { return 0; }
		public void clear() {}
	}



	private static class EmptySet extends EmptyCollection implements 
	   BooleanSet, ByteSortedSet, ShortSortedSet, IntSortedSet, LongSortedSet, CharSortedSet,
	   FloatSortedSet, DoubleSortedSet, ObjectSortedSet, ReferenceSortedSet, java.io.Serializable, Cloneable {
		
		public boolean remove( int k ) { throw new UnsupportedOperationException(); }

		public ByteBidirectionalIterator iterator( byte from ) { return Iterators.BYTE_EMPTY_ITERATOR; }
		public CharBidirectionalIterator iterator( char from ) { return Iterators.CHAR_EMPTY_ITERATOR; }
		public ShortBidirectionalIterator iterator( short from ) { return Iterators.SHORT_EMPTY_ITERATOR; }
		public IntBidirectionalIterator iterator( int from ) { return Iterators.INT_EMPTY_ITERATOR; }
		public LongBidirectionalIterator iterator( long from ) { return Iterators.LONG_EMPTY_ITERATOR; }
		public FloatBidirectionalIterator iterator( float from ) { return Iterators.FLOAT_EMPTY_ITERATOR; }
		public DoubleBidirectionalIterator iterator( double from ) { return Iterators.DOUBLE_EMPTY_ITERATOR; }
		public ObjectBidirectionalIterator iterator( Object from ) { return Iterators.EMPTY_ITERATOR; }

		public ByteSortedSet subSet( byte from, byte to ) { return this; }
		public CharSortedSet subSet( char from, char to ) { return this; }
		public ShortSortedSet subSet( short from, short to ) { return this; }
		public IntSortedSet subSet( int from, int to ) { return this; }
		public LongSortedSet subSet( long from, long to ) { return this; }
		public FloatSortedSet subSet( float from, float to ) { return this; }
		public DoubleSortedSet subSet( double from, double to ) { return this; }
		public SortedSet subSet( Object from, Object to ) { return this; }

		public ByteSortedSet headSet( byte from ) { return this; }
		public CharSortedSet headSet( char from ) { return this; }
		public ShortSortedSet headSet( short from ) { return this; }
		public IntSortedSet headSet( int from ) { return this; }
		public LongSortedSet headSet( long from ) { return this; }
		public FloatSortedSet headSet( float from ) { return this; }
		public DoubleSortedSet headSet( double from ) { return this; }
		public SortedSet headSet( Object from ) { return this; }

		public ByteSortedSet tailSet( byte to ) { return this; }
		public CharSortedSet tailSet( char to ) { return this; }
		public ShortSortedSet tailSet( short to ) { return this; }
		public IntSortedSet tailSet( int to ) { return this; }
		public LongSortedSet tailSet( long to ) { return this; }
		public FloatSortedSet tailSet( float to ) { return this; }
		public DoubleSortedSet tailSet( double to ) { return this; }
		public SortedSet tailSet( Object to ) { return this; }

		public boolean firstBoolean() { throw new NoSuchElementException(); }
		public byte firstByte() { throw new NoSuchElementException(); }
		public char firstChar() { throw new NoSuchElementException(); }
		public short firstShort() { throw new NoSuchElementException(); }
		public int firstInt() { throw new NoSuchElementException(); }
		public long firstLong() { throw new NoSuchElementException(); }
		public float firstFloat() { throw new NoSuchElementException(); }
		public double firstDouble() { throw new NoSuchElementException(); }

		public boolean lastBoolean() { throw new NoSuchElementException(); }
		public byte lastByte() { throw new NoSuchElementException(); }
		public char lastChar() { throw new NoSuchElementException(); }
		public short lastShort() { throw new NoSuchElementException(); }
		public int lastInt() { throw new NoSuchElementException(); }
		public long lastLong() { throw new NoSuchElementException(); }
		public float lastFloat() { throw new NoSuchElementException(); }
		public double lastDouble() { throw new NoSuchElementException(); }

		public Object first() { throw new NoSuchElementException(); }
		public Object last() { throw new NoSuchElementException(); }

		public Comparator comparator() { return null; }
		public ByteComparator byteComparator() { return null; }
		public CharComparator charComparator() { return null; }
		public ShortComparator shortComparator() { return null; }
		public IntComparator intComparator() { return null; }
		public LongComparator longComparator() { return null; }
		public FloatComparator floatComparator() { return null; }
		public DoubleComparator doubleComparator() { return null; }

		public Object clone() { return EMPTY_SET; }

        private Object readResolve() { return EMPTY_SET; }
	}

	private static class EmptyList extends EmptyCollection implements 
	   BooleanList, ByteList, ShortList, IntList, LongList, CharList,
	   FloatList, DoubleList, ObjectList, ReferenceList, java.io.Serializable, Cloneable {
		
		public boolean add( Object k ) { throw new UnsupportedOperationException(); }

		public boolean add( boolean k ) { throw new UnsupportedOperationException(); }
		public boolean add( byte k ) { throw new UnsupportedOperationException(); }
		public boolean add( char k ) { throw new UnsupportedOperationException(); }
		public boolean add( short k ) { throw new UnsupportedOperationException(); }
		public boolean add( int k ) { throw new UnsupportedOperationException(); }
		public boolean add( long k ) { throw new UnsupportedOperationException(); }
		public boolean add( float k ) { throw new UnsupportedOperationException(); }
		public boolean add( double k ) { throw new UnsupportedOperationException(); }
           
		public void add( int i, Object k ) { throw new UnsupportedOperationException(); }

		public void add( int i, boolean k ) { throw new UnsupportedOperationException(); }
		public void add( int i, byte k ) { throw new UnsupportedOperationException(); }
		public void add( int i, char k ) { throw new UnsupportedOperationException(); }
		public void add( int i, short k ) { throw new UnsupportedOperationException(); }
		public void add( int i, int k ) { throw new UnsupportedOperationException(); }
		public void add( int i, long k ) { throw new UnsupportedOperationException(); }
		public void add( int i, float k ) { throw new UnsupportedOperationException(); }
		public void add( int i, double k ) { throw new UnsupportedOperationException(); }

		public Object set( int i, Object k ) { throw new UnsupportedOperationException(); }

		public boolean set( int i, boolean k ) { throw new UnsupportedOperationException(); }
		public byte set( int i, byte k ) { throw new UnsupportedOperationException(); }
		public char set( int i, char k ) { throw new UnsupportedOperationException(); }
		public short set( int i, short k ) { throw new UnsupportedOperationException(); }
		public int set( int i, int k ) { throw new UnsupportedOperationException(); }
		public long set( int i, long k ) { throw new UnsupportedOperationException(); }
		public float set( int i, float k ) { throw new UnsupportedOperationException(); }
		public double set( int i, double k ) { throw new UnsupportedOperationException(); }

		public Object get( int i ) { throw new IndexOutOfBoundsException(); }

		public boolean getBoolean( int i ) { throw new IndexOutOfBoundsException(); }
		public byte getByte( int i ) { throw new IndexOutOfBoundsException(); }
		public char getChar( int i ) { throw new IndexOutOfBoundsException(); }
		public short getShort( int i ) { throw new IndexOutOfBoundsException(); }
		public int getInt( int i ) { throw new IndexOutOfBoundsException(); }
		public long getLong( int i ) { throw new IndexOutOfBoundsException(); }
		public float getFloat( int i ) { throw new IndexOutOfBoundsException(); }
		public double getDouble( int i ) { throw new IndexOutOfBoundsException(); }
           
		public int indexOf( Object k ) { return -1; }

		public int indexOf( boolean k ) { return -1; }
		public int indexOf( byte k ) { return -1; }
		public int indexOf( char k ) { return -1; }
		public int indexOf( short k ) { return -1; }
		public int indexOf( int k ) { return -1; }
		public int indexOf( long k ) { return -1; }
		public int indexOf( float k ) { return -1; }
		public int indexOf( double k ) { return -1; }

		public int lastIndexOf( Object k ) { return -1; }

		public int lastIndexOf( boolean k ) { return -1; }
		public int lastIndexOf( byte k ) { return -1; }
		public int lastIndexOf( char k ) { return -1; }
		public int lastIndexOf( short k ) { return -1; }
		public int lastIndexOf( int k ) { return -1; }
		public int lastIndexOf( long k ) { return -1; }
		public int lastIndexOf( float k ) { return -1; }
		public int lastIndexOf( double k ) { return -1; }

		public boolean addAll( int i, Collection c ) { if ( i != 0 ) throw new IndexOutOfBoundsException(); else if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }

		public boolean addAll( int i, BooleanCollection c ) { if ( i != 0 ) throw new IndexOutOfBoundsException(); else if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( int i, ByteCollection c ) { if ( i != 0 ) throw new IndexOutOfBoundsException(); else if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( int i, CharCollection c ) { if ( i != 0 ) throw new IndexOutOfBoundsException(); else if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( int i, ShortCollection c ) { if ( i != 0 ) throw new IndexOutOfBoundsException(); else if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( int i, IntCollection c ) { if ( i != 0 ) throw new IndexOutOfBoundsException(); else if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( int i, LongCollection c ) { if ( i != 0 ) throw new IndexOutOfBoundsException(); else if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( int i, FloatCollection c ) { if ( i != 0 ) throw new IndexOutOfBoundsException(); else if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( int i, DoubleCollection c ) { if ( i != 0 ) throw new IndexOutOfBoundsException(); else if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }

		public boolean addAll( int i, List c ) { if ( i != 0 ) throw new IndexOutOfBoundsException(); else if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }

		public boolean addAll( int i, BooleanList c ) { if ( i != 0 ) throw new IndexOutOfBoundsException(); else if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( int i, ByteList c ) { if ( i != 0 ) throw new IndexOutOfBoundsException(); else if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( int i, CharList c ) { if ( i != 0 ) throw new IndexOutOfBoundsException(); else if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( int i, ShortList c ) { if ( i != 0 ) throw new IndexOutOfBoundsException(); else if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( int i, IntList c ) { if ( i != 0 ) throw new IndexOutOfBoundsException(); else if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( int i, LongList c ) { if ( i != 0 ) throw new IndexOutOfBoundsException(); else if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( int i, FloatList c ) { if ( i != 0 ) throw new IndexOutOfBoundsException(); else if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }
		public boolean addAll( int i, DoubleList c ) { if ( i != 0 ) throw new IndexOutOfBoundsException(); else if ( c.isEmpty() ) return false; else throw new UnsupportedOperationException(); }

		public Object remove( int k ) { throw new UnsupportedOperationException(); }
		public boolean removeBoolean( int k ) { throw new UnsupportedOperationException(); }
		public byte removeByte( int k ) { throw new UnsupportedOperationException(); }
		public char removeChar( int k ) { throw new UnsupportedOperationException(); }
		public short removeShort( int k ) { throw new UnsupportedOperationException(); }
		public int removeInt( int k ) { throw new UnsupportedOperationException(); }
		public long removeLong( int k ) { throw new UnsupportedOperationException(); }
		public float removeFloat( int k ) { throw new UnsupportedOperationException(); }
		public double removeDouble( int k ) { throw new UnsupportedOperationException(); }

		public ByteBidirectionalIterator iterator( int i ) { if ( i == 0 ) return Iterators.BYTE_EMPTY_ITERATOR; else throw new IndexOutOfBoundsException( i + "" ); }

		public BooleanListIterator booleanListIterator() { return Iterators.BOOLEAN_EMPTY_ITERATOR; }
		public ByteListIterator byteListIterator() { return Iterators.BYTE_EMPTY_ITERATOR; }
		public CharListIterator charListIterator() { return Iterators.CHAR_EMPTY_ITERATOR; }
		public ShortListIterator shortListIterator() { return Iterators.SHORT_EMPTY_ITERATOR; }
		public IntListIterator intListIterator() { return Iterators.INT_EMPTY_ITERATOR; }
		public LongListIterator longListIterator() { return Iterators.LONG_EMPTY_ITERATOR; }
		public FloatListIterator floatListIterator() { return Iterators.FLOAT_EMPTY_ITERATOR; }
		public DoubleListIterator doubleListIterator() { return Iterators.DOUBLE_EMPTY_ITERATOR; }
		public ObjectListIterator objectListIterator() { return Iterators.EMPTY_ITERATOR; }
		public ObjectListIterator referenceListIterator() { return Iterators.EMPTY_ITERATOR; }
		public ListIterator listIterator() { return Iterators.EMPTY_ITERATOR; }


		public ListIterator listIterator( int i ) { if ( i == 0 ) return Iterators.EMPTY_ITERATOR; else throw new IndexOutOfBoundsException( i + "" ); }

		public BooleanListIterator booleanListIterator( int i ) { if ( i == 0 ) return Iterators.BOOLEAN_EMPTY_ITERATOR; else throw new IndexOutOfBoundsException( i + "" ); }
		public ByteListIterator byteListIterator( int i ) { if ( i == 0 ) return Iterators.BYTE_EMPTY_ITERATOR; else throw new IndexOutOfBoundsException( i + "" ); }
		public CharListIterator charListIterator( int i ) { if ( i == 0 ) return Iterators.CHAR_EMPTY_ITERATOR; else throw new IndexOutOfBoundsException( i + "" ); }
		public ShortListIterator shortListIterator( int i ) { if ( i == 0 ) return Iterators.SHORT_EMPTY_ITERATOR; else throw new IndexOutOfBoundsException( i + "" ); }
		public IntListIterator intListIterator( int i ) { if ( i == 0 ) return Iterators.INT_EMPTY_ITERATOR; else throw new IndexOutOfBoundsException( i + "" ); }
		public LongListIterator longListIterator( int i ) { if ( i == 0 ) return Iterators.LONG_EMPTY_ITERATOR; else throw new IndexOutOfBoundsException( i + "" ); }
		public FloatListIterator floatListIterator( int i ) { if ( i == 0 ) return Iterators.FLOAT_EMPTY_ITERATOR; else throw new IndexOutOfBoundsException( i + "" ); }
		public DoubleListIterator doubleListIterator( int i ) { if ( i == 0 ) return Iterators.DOUBLE_EMPTY_ITERATOR; else throw new IndexOutOfBoundsException( i + "" ); }
		public ObjectListIterator objectListIterator( int i ) { if ( i == 0 ) return Iterators.EMPTY_ITERATOR; else throw new IndexOutOfBoundsException( i + "" ); }

		public List subList( int from, int to ) { if ( from == 0 && to == 0 ) return this; else throw new IndexOutOfBoundsException(); }

		public BooleanList booleanSubList( int from, int to ) { if ( from == 0 && to == 0 ) return this; else throw new IndexOutOfBoundsException(); }
		public ByteList byteSubList( int from, int to ) { if ( from == 0 && to == 0 ) return this; else throw new IndexOutOfBoundsException(); }
		public CharList charSubList( int from, int to ) { if ( from == 0 && to == 0 ) return this; else throw new IndexOutOfBoundsException(); }
		public ShortList shortSubList( int from, int to ) { if ( from == 0 && to == 0 ) return this; else throw new IndexOutOfBoundsException(); }
		public IntList intSubList( int from, int to ) { if ( from == 0 && to == 0 ) return this; else throw new IndexOutOfBoundsException(); }
		public LongList longSubList( int from, int to ) { if ( from == 0 && to == 0 ) return this; else throw new IndexOutOfBoundsException(); }
		public FloatList floatSubList( int from, int to ) { if ( from == 0 && to == 0 ) return this; else throw new IndexOutOfBoundsException(); }
		public DoubleList doubleSubList( int from, int to ) { if ( from == 0 && to == 0 ) return this; else throw new IndexOutOfBoundsException(); }
		public ObjectList objectSubList( int from, int to ) { if ( from == 0 && to == 0 ) return this; else throw new IndexOutOfBoundsException(); }
		public ReferenceList referenceSubList( int from, int to ) { if ( from == 0 && to == 0 ) return this; else throw new IndexOutOfBoundsException(); }

		public void getElements( int from, boolean[] a, int offset, int length ) { if ( from == 0 && length == 0 && offset >= 0 && offset <= a.length ) return; else throw new IndexOutOfBoundsException(); }
		public void getElements( int from, byte[] a, int offset, int length ) { if ( from == 0 && length == 0 && offset >= 0 && offset <= a.length ) return; else throw new IndexOutOfBoundsException(); }
		public void getElements( int from, char[] a, int offset, int length ) { if ( from == 0 && length == 0 && offset >= 0 && offset <= a.length ) return; else throw new IndexOutOfBoundsException(); }
		public void getElements( int from, short[] a, int offset, int length ) { if ( from == 0 && length == 0 && offset >= 0 && offset <= a.length ) return; else throw new IndexOutOfBoundsException(); }
		public void getElements( int from, int[] a, int offset, int length ) { if ( from == 0 && length == 0 && offset >= 0 && offset <= a.length ) return; else throw new IndexOutOfBoundsException(); }
		public void getElements( int from, long[] a, int offset, int length ) { if ( from == 0 && length == 0 && offset >= 0 && offset <= a.length ) return; else throw new IndexOutOfBoundsException(); }
		public void getElements( int from, float[] a, int offset, int length ) { if ( from == 0 && length == 0 && offset >= 0 && offset <= a.length ) return; else throw new IndexOutOfBoundsException(); }
		public void getElements( int from, double[] a, int offset, int length ) { if ( from == 0 && length == 0 && offset >= 0 && offset <= a.length ) return; else throw new IndexOutOfBoundsException(); }
		public void getElements( int from, Object[] a, int offset, int length ) { if ( from == 0 && length == 0 && offset >= 0 && offset <= a.length ) return; else throw new IndexOutOfBoundsException(); }

		public void removeElements( int from, int to ) { if ( from == 0 && from == to ) return; else throw new IndexOutOfBoundsException(); }

		public void size( int s )  { if ( s != 0 ) throw new UnsupportedOperationException(); }

		public int compareTo( final Object o ) {
			if ( o == this ) return 0;
			return ((List)o).isEmpty() ? 0 : -1;
		}

        private Object readResolve() { return EMPTY_LIST; }

		public Object clone() { return EMPTY_LIST; }
	}


	/** An empty set (immutable). It is serialisable.
	 *
	 * @return an empty set that can be cast to any (sorted) type-specific set.
	 */

	public static final SortedSet EMPTY_SET = new EmptySet();
	
	/** An empty list (immutable). It is serialisable. 
	 *
	 * @return an empty list that can be cast to any type-specific list.
	 */

	public static final List EMPTY_LIST = new EmptyList();
	
	/** An empty map (immutable). It is serialisable. 
	 *
	 * @return an empty map that can be cast to any (sorted) type-specific map.
	 */

	//public static final Map EMPTY_MAP = EmptyMap.getInstance();
	
	
#include "BooleanCollections-Fragment.j"
#include "ByteCollections-Fragment.j"
#include "ShortCollections-Fragment.j"
#include "IntCollections-Fragment.j"
#include "LongCollections-Fragment.j"
#include "CharCollections-Fragment.j"
#include "FloatCollections-Fragment.j"
#include "DoubleCollections-Fragment.j"
#include "ObjectCollections-Fragment.j"

#ifdef TEST
	
	public static void main( String arg[] ) {
	}
	
#endif
	
}

// Local Variables:
// mode: jde
// tab-width: 4
// End:
