/*	 
 * fastUtil 1.1: Fast & compact specialized hash-based utility classes for Java
 *
 * Copyright (C) 2002 Sebastiano Vigna 
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2, or (at your option) any
 * later version.
 *	
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *	
 * You should have received a copy of the GNU General Public License along
 * with this program; see the file COPYING.  If not, write to the Free
 * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 *
 */

package it.unimi.dsi.fastUtil;

import it.unimi.dsi.fastUtil.Hash; // workaround to force @see/@link

import java.util.*;
import java.io.*;

/** A type-specific hash map with a very fast, small-footprint implementation.
 */

public final class HASHMAP_NAME implements Serializable, Hash, MAP_NAME {
	 /** The array of keys. */
	 private transient KEY_TYPE key[];

	 /** The array of values. */
	 private transient VALUE_TYPE value[];
	 
	 /** The array of occupancy states. */
	 private transient byte state[];

	 /** The acceptable load factor. */
	 private final float loadFactor;
	 
	 /** Index into the prime list, giving the current table size. */
	 private int p;

	 /** Table size. Must be the p-th item of {@link Hash#primes}. */
	 private transient int n;

	 /** Secondary hash for conflict resolution. Must be the {@link #n}-2. */
	 private transient int n2;

	 /** Number of entries in the map. */
	 private int count;

	 /** Cached set of entries and keys. */
	 private transient Set entries, keys;

	 /** Cached collection of values. */
	 private transient Collection values;

#if ! #valueclass(Object)
    /**
     * The default return value for <code>get()</code>, <code>put()</code> and
     * <code>remove()</code>.  
	  */

	 private VALUE_TYPE defRetValue = VALUE_NULL;
#endif


	 /** Creates a new hash map.
	  *
	  * The actual table size is the least available prime greater than n/f.
	  *
	  * @param n the expected number of elements in the hash map.
	  * @param f the load factor.
	  * @see Hash#primes
	  */
	 
	 public HASHMAP_NAME( int n, float f ) {
		  if ( f <= 0 || f > 1 ) throw new IllegalArgumentException("Load factor must be greater than 0 and smaller than or equal to 1");
		  if ( n < 0 ) throw new IllegalArgumentException("Hash table size must be nonnegative");

		  int l = Arrays.binarySearch(primes, n+1);
		  if (l < 0) l = -l-1;

		  this.loadFactor = f;
		  this.n = primes[l];
		  n2 = this.n - 2;
		  p = l;
		  key = new KEY_TYPE[this.n];
		  value = new VALUE_TYPE[this.n];
		  state = new byte[this.n];
	 }
	 
	 
	 /** Creates a new hash map with {@link Hash#DEFAULT_LOAD_FACTOR} as load factor.
	  *
	  * @param n the expected number of elements in the hash map.
	  */
	 
	 public HASHMAP_NAME(int n) {
		  this(n, Hash.DEFAULT_LOAD_FACTOR);
	 }



	 /** Creates a new hash map with {@link Hash#DEFAULT_INITIAL_SIZE} entries
	  * and {@link Hash#DEFAULT_LOAD_FACTOR} as load factor.
	  */
	 
	 public HASHMAP_NAME() {
		  this(Hash.DEFAULT_INITIAL_SIZE, Hash.DEFAULT_LOAD_FACTOR);
	 }


	 /** Creates a new map copying a given one.
	  *
	  * @param m a {@link Map} to be copied into the new hash map. 
	  */
	 
	 public HASHMAP_NAME( Map m ) {
		  this(m.size());
		  putAll(m);
	 }



	 public Object put(Object ok, Object ov) {
		  VALUE_TYPE oldValue;

		  final int n = this.n;
		  final VALUE_TYPE v = VALUE2TYPE(ov);
		  final KEY_TYPE key[] = this.key, k = KEY2TYPE(ok);
		  final byte state[] = this.state;

		  // Primary hash
		  int h = (int)(( (HASH(k) % n) + n ) % n);
		  // Secondary hash
		  final int m = (int)(( (HASH(k) % n2) + n2 ) % n2) + 1;
		  
		  //System.err.print("Putting in " + k + ", " + v + " with hash " + h + " (" + m + ")..." );

		  while( ! KEY_EQUAL(key[h], k) && state[h] != FREE ) h = ( h + m ) % n;
		  
		  if ( state[h] == BUSY ) {
				oldValue = value[h];
				value[h] = v;
				//System.err.println("done.");
				return VALUE2OBJ(oldValue);
		  }
		  else {
				state[h] = BUSY;
				count++;
				key[h] = k;
				value[h] = v;
				if ( count >= n * loadFactor ) rehash( Math.min(p+16, primes.length-1) ); // Table too filled, let's rehash
		  }

		  //System.err.println("done.");
		  return null;
	 }
	 

#if ! ( #valueclass(Object) && #keyclass(Object) )


	 public VALUE_TYPE put(KEY_TYPE k, VALUE_TYPE v) {
		  VALUE_TYPE oldValue;

		  final int n = this.n;
		  final KEY_TYPE key[] = this.key;
		  final byte state[] = this.state;

		  // Primary hash
		  int h = (int)(( (HASH(k) % n) + n ) % n);
		  // Secondary hash
		  final int m = (int)(( (HASH(k) % n2) + n2 ) % n2) + 1;
		  
		  //System.err.print("Putting in " + k + ", " + v + " with hash " + h + " (" + m + ")..." );

		  while( ! KEY_EQUAL( key[h], k ) && state[h] != FREE ) h = ( h + m ) % n;
		  
		  if ( state[h] == BUSY ) {
				oldValue = value[h];
				value[h] = v;
				//System.err.println("done.");
				return oldValue;
		  }
		  else {
				state[h] = BUSY;
				count++;
				key[h] = k;
				value[h] = v;
				if ( count >= n * loadFactor ) rehash( Math.min(p+16, primes.length-1) ); // Table too filled, let's rehash
		  }

		  //System.err.println("done.");
		  return DEF_RET_VALUE;
	 }


#endif



	 public Object remove(Object ok) {
		  VALUE_TYPE oldValue;

		  final int n = this.n;
		  final KEY_TYPE key[] = this.key, k = KEY2TYPE(ok);
		  final byte state[] = this.state;

		  if (count == 0) return null;

		  int h = (int)(( (HASH(k) % n) + n ) % n);
		  final int s = h, m = (int)(( (HASH(k) % n2 ) + n2 ) % n2) + 1;
		  
		  //System.err.println("Putting in " + k + ", " + v + " with hash " + h + " (" + m + ")" );

		  while( ! KEY_EQUAL(key[h], k) && state[h] != FREE ) if ( (h = ( h + m ) % n) == s ) break;
		  
		  if ( state[h] == BUSY && KEY_EQUAL(key[h], k) ) {
				state[h] = REMOVED;
				count--;
				
				return VALUE2OBJ(value[h]);
		  }
		  else return null;
	 }

#if ! #valueclass(Object) 
	 
	 public void setDefRetValue( VALUE_TYPE rv ) {
		  defRetValue = rv;
	 }

	 public VALUE_TYPE getDefRetValue() {
		  return defRetValue;
	 }


	 public boolean containsValue(Object v) {
		  return containsValue(VALUE2TYPE(v));
	 }

#endif



	 public boolean containsValue(VALUE_TYPE v) {
		  final VALUE_TYPE value[] = this.value;
		  final byte state[] = this.state;

		  if (count == 0) return false;
		  
		  for(int i = n; i-- != 0; ) if (state[i] == BUSY && VALUE_EQUAL(value[i], v)) return true;
		  return false;
	 }


	 public void clear() {
		  this.count = 0;
		  Arrays.fill(state, FREE);
		  // We null all object entries so that the garbage collector can do its work.
#if #keyclass(Object)
		  Arrays.fill(key, null);
#endif
#if #valueclass(Object)
		  Arrays.fill(value, null);
#endif
	 }


#if ! #keyclass(Object) || ! #valueclass(Object) 
	 public void putAll(Map m) {
		  if (m instanceof MAP_NAME) {
				MAP_NAME.Entry e;
				for(Iterator i = m.entrySet().iterator(); i.hasNext(); ) {
					 e = (MAP_NAME.Entry)i.next();
					 put(e.ENTRY_GET_KEY(), e.ENTRY_GET_VALUE());
				}
		  }
		  else {
				Map.Entry e;
				for(Iterator i = m.entrySet().iterator(); i.hasNext(); ) {
					 e = (Map.Entry)i.next();
					 put(e.getKey(), e.getValue());
				}
		  } 
	 }
#endif

    private static class Entry implements MAP_NAME.Entry {
		  KEY_TYPE key;
		  VALUE_TYPE value;

		  Entry(Object key, Object value) {
				this.key = KEY2TYPE(key);
				this.value = VALUE2TYPE(value);
		  }

#if ! #keyclass(Object) || ! #valueclass(Object) 
		  
		  Entry(KEY_TYPE key, VALUE_TYPE value) {
				this.key = key;
				this.value = value;
		  }
		  
#endif

		  public Object getKey() {
				return KEY2OBJ(key);
		  }
		  
#if ! #keyclass(Object)
		  public KEY_TYPE ENTRY_GET_KEY() {
				return key;
		  }
#endif

		  public Object getValue() {
				return VALUE2OBJ(value);
		  }
		  
#if ! #valueclass(Object)
		  public VALUE_TYPE ENTRY_GET_VALUE() {
				return value;
		  }
#endif

		  public VALUE_TYPE setValue(VALUE_TYPE value) {
				VALUE_TYPE oldValue = this.value;
				this.value = value;
				return oldValue;
		  }
		  
#if ! #valueclass(Object)
		  
		  public Object setValue(Object value) {
				return VALUE2OBJ(setValue(VALUE2TYPE(value)));
		  }

#endif


		  public boolean equals(Object o) {
				if (!(o instanceof Entry)) return false;
				Entry e = (Entry)o;
				
				return KEY_EQUAL(key, e.key) && VALUE_EQUAL(value, e.value);
		  }
		  
		  public int hashCode() {
				return KEY2OBJ(key).hashCode() ^ VALUE2OBJ(value).hashCode();
		  }
		  
		  
		  public String toString() {
				return key + "=" + value;
		  }
    }
	 

    public Set entrySet() {
		  if (entries == null) entries = new AbstractSet() {
					 
					 public Iterator iterator() {
						  return new Iterator() {
									 int pos = 0, last = -1, c = count;
						  
									 { 
										  final byte state[] = HASHMAP_NAME.this.state;
										  final int n = HASHMAP_NAME.this.n;

										  if (c == 0) pos = n;

										  while( pos < n && state[pos] != BUSY ) pos++;
									 }
						  
									 public boolean hasNext() {
										  return c != 0 && pos < n;
									 }
						  
									 public Object next() {
										  Entry retVal;
										  final byte state[] = HASHMAP_NAME.this.state;
										  final int n = HASHMAP_NAME.this.n;
		  
										  if (!hasNext()) throw new NoSuchElementException();
										  retVal = new Entry(key[last = pos], value[pos]);
										  if (--c != 0) do pos++; while( pos < n && state[pos] != BUSY );
								
										  return retVal;
									 }
						  
									 public void remove() {
										  if (last == -1) throw new IllegalStateException();
										  state[last] = REMOVED;
										  count--;
									 }
								};

					 }
					 
					 public boolean contains(Object o) {
						  if (!(o instanceof Map.Entry)) return false;
						  Map.Entry e = (Map.Entry)o;
						  Object v = get(e.getKey());
						  return VALUE_EQUAL(v, e.getValue());
					 }
					 
					 public boolean remove(Object o) {
						  if (!(o instanceof Map.Entry)) return false;
						  Map.Entry e = (Map.Entry)o;
						  Object v = get(e.getKey());
						  if ( VALUE_EQUAL(v, e.getValue()) ) return remove(e.getKey());
						  return false;
					 }
					 
					 public int size() {
						  return count;
					 }
					 
					 public void clear() {
						  HASHMAP_NAME.this.clear();
					 }
				};
	 
		  return entries;
	 }


    public Set keySet() {
		  if (keys == null) keys = new ABSTRACT_KEY_SET() {

					 public Iterator iterator() {
						  return new KEY_ITERATOR_NAME() {
									 int pos = 0, last = -1, c = count;
		  
									 { 
										  final byte state[] = HASHMAP_NAME.this.state;
										  final int n = HASHMAP_NAME.this.n;
										  
										  if (c == 0) pos = n;

										  while( pos < n && state[pos] != BUSY ) pos++;
									 }
									 
									 public boolean hasNext() {
										  return c != 0 && pos < n;
									 }
									 
#if !#keyclass(Object)
									 public KEY_TYPE NEXT_KEY_TYPE_CAP() {
										  KEY_TYPE retVal;
										  final byte state[] = HASHMAP_NAME.this.state;
										  final int n = HASHMAP_NAME.this.n;
										  
										  if (!hasNext()) throw new NoSuchElementException();
										  retVal = key[last = pos];
										  if (--c != 0) do pos++; while( pos < n && state[pos] != BUSY );
										  
										  return retVal;
									 }

#endif									 

									 public Object next() {
										  Object retVal;
										  final byte state[] = HASHMAP_NAME.this.state;
										  final int n = HASHMAP_NAME.this.n;
										  
										  if (!hasNext()) throw new NoSuchElementException();
										  retVal = KEY2OBJ(key[last = pos]);
										  if (--c != 0) do pos++; while( pos < n && state[pos] != BUSY );
										  
										  return retVal;
									 }
									 
									 public void remove() {
										  if (last == -1) throw new IllegalStateException();
										  state[last] = REMOVED;
										  count--;
									 }
								};
					 }

					 public int size() {
						  return count;
					 }


#if ! #keyclass(Object)
					 public boolean add(KEY_TYPE k) {
						  throw new UnsupportedOperationException();
					 }
					 
					 public boolean contains(KEY_TYPE k) {
						  return containsKey(k);
					 }
					 
					 public boolean remove(KEY_TYPE k) {
						  int oldCount = count;
						  HASHMAP_NAME.this.remove(k);
						  return count != oldCount;
					 }
					 
#endif
					 public boolean contains(Object ok) {
						  return containsKey(ok);
					 }

					 public boolean remove(Object ok) {
						  int oldCount = count;
						  HASHMAP_NAME.this.remove(ok);
						  return count != oldCount;
					 }

					 public void clear() {
						  HASHMAP_NAME.this.clear();
					 }
				};
		  return keys;
    }


    public Collection values() {
		  if (values == null) values = new ABSTRACT_VALUE_COLLECTION() {

					 public Iterator iterator() {
						  return new VALUE_ITERATOR_NAME() {
									 int pos = 0, last = -1, c = count;
									 
									 { 
										  final byte state[] = HASHMAP_NAME.this.state;
										  final int n = HASHMAP_NAME.this.n;
										  
										  if (c == 0) pos = n;
		  
										  while( pos < n && state[pos] != BUSY ) pos++;
									 }
		  
									 public boolean hasNext() {
										  return c != 0 && pos < n;
									 }
		  
#if !#valueclass(Object)
									 public VALUE_TYPE NEXT_VALUE_TYPE_CAP() {
										  VALUE_TYPE retVal;
										  final byte state[] = HASHMAP_NAME.this.state;
										  final int n = HASHMAP_NAME.this.n;
		  
										  if (!hasNext()) throw new NoSuchElementException();
										  retVal = value[pos];
										  if (--c != 0) do pos++; while( pos < n && state[pos] != BUSY );

										  return retVal;
									 }
#endif
		  
									 public Object next() {
										  Object retVal;
										  final byte state[] = HASHMAP_NAME.this.state;
										  final int n = HASHMAP_NAME.this.n;
		  
										  if (!hasNext()) throw new NoSuchElementException();
										  retVal = VALUE2OBJ(value[pos]);
										  if (--c != 0) do pos++; while( pos < n && state[pos] != BUSY );

										  return retVal;
									 }
		  
									 public void remove() {
										  throw new UnsupportedOperationException();
									 }
								};
					 }

					 public int size() {
						  return count;
					 }

					 public boolean contains(Object ok) {
						  return containsValue(ok);
					 }

#if ! #valueclass(Object)
					 public boolean add(VALUE_TYPE k) {
						  throw new UnsupportedOperationException();
					 }

					 public boolean contains(VALUE_TYPE v) {
						  return containsValue(v);
					 }
					 
					 public boolean remove(VALUE_TYPE k) {
						  throw new UnsupportedOperationException();
					 }
#endif
					 public void clear() {
						  HASHMAP_NAME.this.clear();
					 }
				};

		  return values;
    }





	 /** Resizes the map.
	  * @param newP the new size as an index in {@link Hash#primes}.
	  */

	 private void rehash( int newP ) {
		  int i, count = 0, h, m;

		  KEY_TYPE k;
		  VALUE_TYPE v;

		  final int n = this.n, newN = primes[newP], newN2 = newN-2;
		  final KEY_TYPE key[] = this.key, newKey[] = new KEY_TYPE[newN];
		  final VALUE_TYPE value[] = this.value, newValue[] = new VALUE_TYPE[newN];
		  final byte state[] = this.state, newState[] = new byte[newN];

		  for(i=0; i<n; i++) {

				if ( state[i] != BUSY ) continue;

				k = key[i];
				v = value[i];

				h = (int)(( (HASH(k) % newN) + newN ) % newN);
				m = (int)(( (HASH(k) % newN2 ) + newN2 ) % newN2) + 1;

				while( newState[h] != FREE ) h = ( h + m ) % newN;
				
				newState[h] = BUSY;
				newKey[h] = k;
				newValue[h] = v;
				count++;

		  }

		  this.n = newN;
		  this.n2 = newN2;
		  p = newP;
		  this.key = newKey;
		  this.value = newValue;
		  this.state = newState;
		  this.count = count;
	 }
	 
	 public boolean containsKey(KEY_TYPE k) {
		  final int n = this.n;
		  final KEY_TYPE key[] = this.key;
		  final byte state[] = this.state;

		  if (count == 0) return false;

		  int h = (int)(( (HASH(k) % n) + n ) % n);
		  final int m = (int)(( (HASH(k) % n2 ) + n2 ) % n2) + 1;
		  
		  while( ! KEY_EQUAL(key[h], k) && state[h] != FREE ) h = ( h + m ) % n;
		  
		  return state[h] == BUSY;
	 }
	 
	 public int size() {
		  return count;
	 }

	 public boolean isEmpty() {
		  return count == 0;
	 }


	 public Object get(Object ok) {
		  final int n = this.n;
		  final KEY_TYPE key[] = this.key, k = KEY2TYPE(ok);
		  final byte state[] = this.state;

		  if (count == 0) return null;

		  int h = (int)(( (HASH(k) % n) + n ) % n);
		  final int s = h, m = (int)(( (HASH(k) % n2 ) + n2 ) % n2) + 1;
		  
		  while( ! KEY_EQUAL(key[h], k) && state[h] != FREE ) if ( (h = ( h + m ) % n) == s ) break;
		  
		  if ( state[h] == BUSY && KEY_EQUAL(key[h], k) ) return VALUE2OBJ(value[h]);
		  return null;
	 }


#if !#keyclass(Object)

	 public VALUE_TYPE get(KEY_TYPE k) {
		  final int n = this.n;
		  final KEY_TYPE key[] = this.key;
		  final byte state[] = this.state;

		  if (count == 0) return DEF_RET_VALUE;

		  int h = (int)(( (HASH(k) % n) + n ) % n);
		  final int s = h, m = (int)(( (HASH(k) % n2 ) + n2 ) % n2) + 1;
		  
		  while( ! KEY_EQUAL(key[h], k) && state[h] != FREE ) if ( (h = ( h + m ) % n) == s ) break;
		  
		  if ( state[h] == BUSY && KEY_EQUAL(key[h], k) ) return value[h];
		  return DEF_RET_VALUE;
	 }


	 /** Removes the entry with the given key from the map.
	  *
	  * @param k the key.
	  * @return the old value, or the default return value if no value was present for the given key.
	  */

	 public VALUE_TYPE remove(KEY_TYPE k) {
		  VALUE_TYPE oldValue;

		  final int n = this.n;
		  final KEY_TYPE key[] = this.key;
		  final byte state[] = this.state;

		  if (count == 0) return DEF_RET_VALUE;

		  int h = (int)(( (HASH(k) % n) + n ) % n);
		  final int s = h, m = (int)(( (HASH(k) % n2 ) + n2 ) % n2) + 1;
		  
		  //System.err.println("Putting in " + k + ", " + v + " with hash " + h + " (" + m + ")" );

		  while( ! KEY_EQUAL(key[h], k) && state[h] != FREE ) if ( (h = ( h + m ) % n) == s ) break;
		  
		  if ( state[h] == BUSY && KEY_EQUAL(key[h], k) ) {
				state[h] = REMOVED;
				count--;
				
				return value[h];
		  }
		  else return DEF_RET_VALUE;
	 }
	 

	 public boolean containsKey(Object ok) {
		  return containsKey(KEY2TYPE(ok));
	 }

#else
#if !#valueclass(Object)

	 public VALUE_TYPE GET_VALUE_TYPE_CAP(Object k) {
		  final int n = this.n;
		  final KEY_TYPE key[] = this.key;
		  final byte state[] = this.state;

		  if (count == 0) return DEF_RET_VALUE;

		  int h = (int)(( (HASH(k) % n) + n ) % n);
		  final int s = h, m = (int)(( (HASH(k) % n2 ) + n2 ) % n2) + 1;
		  
		  while( ! KEY_EQUAL(key[h], k) && state[h] != FREE ) if ( (h = ( h + m ) % n) == s ) break;
		  
		  if ( state[h] == BUSY && KEY_EQUAL(key[h], k) ) return value[h];
		  return DEF_RET_VALUE;
	 }

	 /** Removes the entry with the given key from the map.
	  *
	  * @param k the key.
	  * @return the old value, or the default return value if no value was present for the given key.
	  */

	 public VALUE_TYPE REMOVE_VALUE_TYPE_CAP(Object k) {
		  VALUE_TYPE oldValue;

		  final int n = this.n;
		  KEY_TYPE key[] = this.key;
		  byte state[] = this.state;

		  if (count == 0) return DEF_RET_VALUE;

		  int h = (int)(( (HASH(k) % n) + n ) % n);
		  final int s = h, m = (int)(( (HASH(k) % n2 ) + n2 ) % n2) + 1;
		  
		  //System.err.println("Putting in " + k + ", " + v + " with hash " + h + " (" + m + ")" );

		  while( ! KEY_EQUAL(key[h], k) && state[h] != FREE ) if ( (h = ( h + m ) % n) == s ) break;
		  
		  if ( state[h] == BUSY && KEY_EQUAL(key[h], k) ) {
				state[h] = REMOVED;
				count--;
				
				return value[h];
		  }
		  else return DEF_RET_VALUE;
	 }
	 
#endif
#endif

    private void writeObject(java.io.ObjectOutputStream s) throws IOException {
		  final KEY_TYPE key[] = this.key;
		  final VALUE_TYPE value[] = this.value;
		  final byte state[] = this.state;

		  s.defaultWriteObject();
		  for (int i = n; i-- != 0; ) {
				if (state[i] == BUSY) {
					 s.WRITE_KEY_TYPE_CAP(key[i]);
					 s.WRITE_VALUE_TYPE_CAP(value[i]);
				}
		  }
    }

    private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
		  KEY_TYPE key;
		  VALUE_TYPE value;
		  int count;

		  s.defaultReadObject();
		  this.n = primes[p];
		  this.n2 = this.n - 2;
		  count = this.count;

		  this.key = new KEY_TYPE[n];
		  this.value = new VALUE_TYPE[n];
		  this.state = new byte[n];
		  this.count = 0;

		  for (int i = count; i-- != 0; ) {
				key = s.READ_KEY_TYPE_CAP();
				value = s.READ_VALUE_TYPE_CAP();
				put(key, value);
		  }
    }

#ifndef NDEBUG

	 private static void speedTest( int n, float f ) {
		  int i;
		  MAP_NAME m;
		  Map t;
		  Random r = new Random();
		  Object o;
		  long v, fm, ct;

		  for(int k=0; k<10; k++) {

				if (k>0) System.out.println();

				t = new HashMap(n);
				m = new HASHMAP_NAME(n, f);
				/* First of all, we measure the time that is necessary to produce the inputs. */
		  
				v = System.currentTimeMillis();
		  
				for( i=0; i<n;  i++ ) {
				
#if #keyclass(Byte) || #keyclass(Short) || #keyclass(Character)
					 new KEY_CLASS((KEY_TYPE)(r.nextInt())) 
#elif ! #keyclass(Object)
						  new KEY_CLASS(r.NEXT_KEY_TYPE_CAP()) 
#else
						  new Long(r.nextLong()) 
#endif
						  ;
#if #valueclass(Byte) || #valueclass(Short) || #valueclass(Character)
					 new VALUE_CLASS((VALUE_TYPE)(r.nextInt())) 
#elif ! #valueclass(Object)
						  new VALUE_CLASS(r.NEXT_VALUE_TYPE_CAP()) 
#else
						  new Long(r.nextLong()) 
#endif
						  ;
				}
		  
				ct = System.currentTimeMillis() - v;
		  
				v = System.currentTimeMillis();
		  

				/* Then we add pairs to t. */

				for( i=0; i<n;  i++ ) {
					 t.put( 
#if #keyclass(Byte) || #keyclass(Short) || #keyclass(Character)
							 new KEY_CLASS((KEY_TYPE)(r.nextInt())) 
#elif ! #keyclass(Object)
							 new KEY_CLASS(r.NEXT_KEY_TYPE_CAP()) 
#else
							 r.nextInt() % 100 == 0 ? null : new Long(r.nextLong()) 
#endif
							 ,
#if #valueclass(Byte) || #valueclass(Short) || #valueclass(Character)
							 new VALUE_CLASS((VALUE_TYPE)(r.nextInt())) 
#elif ! #valueclass(Object)
							 new VALUE_CLASS(r.NEXT_VALUE_TYPE_CAP()) 
#else
							 r.nextInt() % 100 == 0 ? null : new Long(r.nextLong()) 
#endif
							 
							 );
				}

				System.out.println("Added "+n+" pairs in old HashMap (actual size: " + t.size() + ") in "+((System.currentTimeMillis() - v)) / 1000.0+"s" + 
										 " (actual time: "+((System.currentTimeMillis() - v - ct)) / 1000.0+"s)" );

				v = System.currentTimeMillis();

				/* Then we check for pairs in t. */

				for( i=0; i<n;  i++ ) {
					 t.get( 
#if #keyclass(Byte) || #keyclass(Short) || #keyclass(Character)
							 new KEY_CLASS((KEY_TYPE)(r.nextInt())) 
#elif ! #keyclass(Object)
							 new KEY_CLASS(r.NEXT_KEY_TYPE_CAP())
#else
							 r.nextInt() % 100 == 0 ? null : new Long(r.nextLong())
#endif
							 );
				}

				System.out.println("Examined "+n+" pairs in old HashMap in "+((System.currentTimeMillis() - v)) / 1000.0+"s"+
										 " (actual time: "+((System.currentTimeMillis() - v - ct)) / 1000.0+"s)" );

				v = System.currentTimeMillis();

				/* Again, we measure the time that is necessary to produce the inputs. */
		  
				v = System.currentTimeMillis();
		  
				for( i=0; i<n;  i++ ) {
				
#if #keyclass(Byte) || #keyclass(Short) || #keyclass(Character)
					 r.nextInt()
#elif ! #keyclass(Object)
					 r.NEXT_KEY_TYPE_CAP()
#else
					 r.nextLong()
#endif
						  ;
				}
		  
				ct = System.currentTimeMillis() - v;
		  
				v = System.currentTimeMillis();

				/* Then we add pairs to m. */

				for( i=0; i<n;  i++ ) {
					 m.put( 
#if #keyclass(Byte) || #keyclass(Short) || #keyclass(Character)
							 new KEY_CLASS((KEY_TYPE)(r.nextInt())) 
#elif ! #keyclass(Object)
							 new KEY_CLASS(r.NEXT_KEY_TYPE_CAP()) 
#else
							 r.nextInt() % 100 == 0 ? null : new Long(r.nextLong()) 
#endif
							 ,
#if #valueclass(Byte) || #valueclass(Short) || #valueclass(Character)
							 new VALUE_CLASS((VALUE_TYPE)(r.nextInt())) 
#elif ! #valueclass(Object)
							 new VALUE_CLASS(r.NEXT_VALUE_TYPE_CAP()) 
#else
							 r.nextInt() % 100 == 0 ? null : new Long(r.nextLong()) 
#endif
							 );
				}
		  
				System.out.println("Added "+n+" pairs in new HashMap (actual size: " + m.size() + ") in "+((System.currentTimeMillis() - v)) / 1000.0+"s"+
										 " (actual time: "+((System.currentTimeMillis() - v - ct)) / 1000.0+"s)" );

				v = System.currentTimeMillis();

				/* Then we check for pairs in m. */

				for( i=0; i<n;  i++ ) {
					 m.get( 
#if #keyclass(Byte) || #keyclass(Short) || #keyclass(Character)
							 (KEY_TYPE)r.nextInt()
#elif ! #keyclass(Object)
							 r.NEXT_KEY_TYPE_CAP()
#else
							 r.nextInt() % 100 == 0 ? null : new Long(r.nextLong())
#endif
							 );
				}
				
				System.out.println("Examined "+n+" pairs in new HashMap in "+((System.currentTimeMillis() - v)) / 1000.0+"s" +
										 " (actual time: "+((System.currentTimeMillis() - v - ct)) / 1000.0+"s)" );
	 
				
#if !#valueclass(Object) && !#valueclass(Boolean) && !#keyclass(Object) && !#keyclass(Boolean)
				v = System.currentTimeMillis();
				
				/* Then we enumerate items in t. */
				int s = 0;
				for(Iterator it=t.keySet().iterator(); it.hasNext(); ) t.get(it.next());
				
				System.out.println("Iterated on old HashMap in "+((System.currentTimeMillis() - v)) / 1000.0+"s");
	 
				v = System.currentTimeMillis();

				/* Then we enumerate items in m. */
				for(KEY_ITERATOR_NAME it=(KEY_ITERATOR_NAME)m.keySet().iterator(); it.hasNext(); ) m.get(it.NEXT_KEY_TYPE_CAP());
				
				System.out.println("Iterated on new HashMap in "+((System.currentTimeMillis() - v)) / 1000.0+"s");
#endif
	 
		  }


	 }


	 private static boolean valEquals(Object o1, Object o2) {
		  return o1 == null ? o2 == null : o1.equals(o2);
	 }


	 private static void regressionTest( int n, float f ) {
		  MAP_NAME m = new HASHMAP_NAME(Hash.DEFAULT_INITIAL_SIZE, f);
		  Map t = new HashMap();
		  Random r = new Random();

		  /* First of all, we fill t with random data. */

		  for(int i=0; i<n;  i++ ) {
				t.put( 
#if #keyclass(Byte) || #keyclass(Short) || #keyclass(Character)
						new KEY_CLASS((KEY_TYPE)(r.nextInt())) 
#elif ! #keyclass(Object)
						new KEY_CLASS(r.NEXT_KEY_TYPE_CAP()) 
#else
						r.nextInt() % 100 == 0 ? null : new Long(r.nextLong()) 
#endif
						,
#if #valueclass(Byte) || #valueclass(Short) || #valueclass(Character)
						new VALUE_CLASS((VALUE_TYPE)(r.nextInt())) 
#elif ! #valueclass(Object)
						new VALUE_CLASS(r.NEXT_VALUE_TYPE_CAP()) 
#else
						r.nextInt() % 100 == 0 ? null : new Long(r.nextLong()) 
#endif
						);
		  }
		  
		  /* Now we add to m the same data */
		  
		  m.putAll(t);

		  /* Now we check that m actually holds that data. */
		  
		  for(Iterator i=t.entrySet().iterator(); i.hasNext();  ) {
				java.util.Map.Entry e = (java.util.Map.Entry)i.next();
		      if (!valEquals(e.getValue(), m.get(e.getKey()))) {
					 System.out.println("Error: m and t differ on an entry ("+e+") after insertion (iterating on t).\n");
					 System.exit(-1);
				}
		  }

		  /* Now we check that m actually holds that data, but iterating on m. */
		  
		  for(Iterator i=m.entrySet().iterator(); i.hasNext();  ) {
				Entry e = (Entry)i.next();
		      if (!valEquals(e.getValue(), t.get(e.getKey()))) {
					 System.out.println("Error: m and t differ on an entry ("+e+") after insertion (iterating on m).\n");
					 System.exit(-1);
				}
		  }

		  /* Now we check that m actually holds the same keys. */
		  
		  for(Iterator i=t.keySet().iterator(); i.hasNext();  ) {
				Object o = i.next();
		      if (!m.containsKey(o)) {
					 System.out.println("Error: m and t differ on a key ("+o+") after insertion (iterating on t).\n");
					 System.exit(-1);
				}
		      if (!m.keySet().contains(o)) {
					 System.out.println("Error: m and t differ on a key ("+o+", in keySet()) after insertion (iterating on t).\n");
					 System.exit(-1);
				}
		  }

		  /* Now we check that m actually holds the same keys, but iterating on m. */
		  
		  for(Iterator i=m.keySet().iterator(); i.hasNext();  ) {
				Object o = i.next();
		      if (!t.containsKey(o)) {
					 System.out.println("Error: m and t differ on a key after insertion (iterating on m).\n");
					 System.exit(-1);
				}
		      if (!t.keySet().contains(o)) {
					 System.out.println("Error: m and t differ on a key (in keySet()) after insertion (iterating on m).\n");
					 System.exit(-1);
				}
		  }


		  /* Now we check that m actually hold the same values. */
		  
		  for(Iterator i=t.values().iterator(); i.hasNext();  ) {
				Object o = i.next();
		      if (!m.containsValue(o)) {
					 System.out.println("Error: m and t differ on a value after insertion (iterating on t).\n");
					 System.exit(-1);
				}
		      if (!m.values().contains(o)) {
					 System.out.println("Error: m and t differ on a value (in values()) after insertion (iterating on t).\n");
					 System.exit(-1);
				}
		  }

		  /* Now we check that m actually hold the same values, but iterating on m. */
		  
		  for(Iterator i=m.values().iterator(); i.hasNext();  ) {
				Object o = i.next();
		      if (!t.containsValue(o)) {
					 System.out.println("Error: m and t differ on a value after insertion (iterating on m).\n");
					 System.exit(-1);
				}
		      if (!t.values().contains(o)) {
					 System.out.println("Error: m and t differ on a value (in values()) after insertion (iterating on m).\n");
					 System.exit(-1);
				}
		  }

		  /* Now we check that inquiries about random data give the same answer in m and t. For
			  m we use the polymorphic method. */

		  for(int i=0; i<n;  i++ ) {
				KEY_TYPE T =
#if #keyclass(Byte) || #keyclass(Short) || #keyclass(Character)
					 (KEY_TYPE)r.nextInt()
#elif ! #keyclass(Object)
					 r.NEXT_KEY_TYPE_CAP()
#else
					 r.nextInt() % 100 == 0 ? null : new Long(r.nextLong())
#endif
					 ;

				if (m.containsKey(KEY2OBJ(T)) != t.containsKey(KEY2OBJ(T))) {
					 System.out.println("Error: divergence in keys between t and m (polymorphic method).\n");
					 System.exit(-1);
				}

#if #keyclass(Object) && ! #valueclass(Object)
				if ((m.GET_VALUE_TYPE_CAP(T) != VALUE_NULL) != ((t.get(KEY2OBJ(T)) == null ? VALUE_NULL : VALUE2TYPE(t.get(KEY2OBJ(T)))) != VALUE_NULL) || 
					 t.get(KEY2OBJ(T)) != null && 
					 ! VALUE2OBJ(m.GET_VALUE_TYPE_CAP(T)).equals(t.get(KEY2OBJ(T)))) 
#else
					 if ((m.get(T) != VALUE_NULL) != ((t.get(KEY2OBJ(T)) == null ? VALUE_NULL : VALUE2TYPE(t.get(KEY2OBJ(T)))) != VALUE_NULL) || 
						  t.get(KEY2OBJ(T)) != null && 
						  ! m.get(KEY2OBJ(T)).equals(t.get(KEY2OBJ(T)))) 
#endif
						  {
								System.out.println("Error: divergence between t and m (polymorphic method).\n");
								System.exit(-1);
						  }
		  }

		  /* Again, we check that inquiries about random data give the same answer in m and t, but
			  for m we use the standard method. */

		  for(int i=0; i<n;  i++ ) {
				KEY_TYPE T =
#if #keyclass(Byte) || #keyclass(Short) || #keyclass(Character)
					 (KEY_TYPE)r.nextInt()
#elif ! #keyclass(Object)
					 r.NEXT_KEY_TYPE_CAP()
#else
					 r.nextInt() % 100 == 0 ? null : new Long(r.nextLong())
#endif
					 ;
				if (!valEquals(m.get(KEY2OBJ(T)), t.get(KEY2OBJ(T)))) {
					 System.out.println("Error: divergence between t and m (standard method).\n");
					 System.exit(-1);
				}
		  }

		  /* Now we put and remove random data in m and t, checking that the result is the same. */

		  for(int i=0; i<n;  i++ ) {
				KEY_TYPE T =
#if #keyclass(Byte) || #keyclass(Short) || #keyclass(Character)
					 (KEY_TYPE)r.nextInt()
#elif ! #keyclass(Object)
					 r.NEXT_KEY_TYPE_CAP()
#else
					 r.nextInt() % 100 == 0 ? null : new Long(r.nextLong())
#endif
					 ;
				VALUE_TYPE U =
#if #valueclass(Byte) || #valueclass(Short) || #valueclass(Character)
					 (VALUE_TYPE)r.nextInt()
#elif ! #valueclass(Object)
					 r.NEXT_VALUE_TYPE_CAP()
#else
					 r.nextInt() % 100 == 0 ? null : new Long(r.nextLong())
#endif
					 ;
				if (!valEquals(m.put(KEY2OBJ(T), VALUE2OBJ(U)), t.put(KEY2OBJ(T), VALUE2OBJ(U)))) {
					 System.out.println("Error: divergence in put() between t and m.\n");
					 System.exit(-1);
				}
				T =
#if #keyclass(Byte) || #keyclass(Short) || #keyclass(Character)
					 (KEY_TYPE)r.nextInt()
#elif ! #keyclass(Object)
					 r.NEXT_KEY_TYPE_CAP()
#else
					 r.nextInt() % 100 == 0 ? null : new Long(r.nextLong())
#endif
					 ;
				if (!valEquals(m.remove(KEY2OBJ(T)), t.remove(KEY2OBJ(T)))) {
					 System.out.println("Error: divergence in remove() between t and m.\n");
					 System.exit(-1);
				}
		  }



		  /* Now we check that m actually holds the same data. */
		  
		  for(Iterator i=t.entrySet().iterator(); i.hasNext();  ) {
				java.util.Map.Entry e = (java.util.Map.Entry)i.next();
		      if (!valEquals(e.getValue(), m.get(e.getKey()))) {
					 System.out.println("Error: m and t differ on an entry ("+e+") after removal (iterating on t).\n");
					 System.exit(-1);
				}
		  }

		  /* Now we check that m actually holds that data, but iterating on m. */
		  
		  for(Iterator i=m.entrySet().iterator(); i.hasNext();  ) {
				Entry e = (Entry)i.next();
		      if (!valEquals(e.getValue(), t.get(e.getKey()))) {
					 System.out.println("Error: m and t differ on an entry ("+e+") after removal (iterating on m).\n");
					 System.exit(-1);
				}
		  }

		  /* Now we check that m actually holds the same keys. */
		  
		  for(Iterator i=t.keySet().iterator(); i.hasNext();  ) {
				Object o = i.next();
		      if (!m.containsKey(o)) {
					 System.out.println("Error: m and t differ on a key ("+o+") after removal (iterating on t).\n");
					 System.exit(-1);
				}
		      if (!m.keySet().contains(o)) {
					 System.out.println("Error: m and t differ on a key ("+o+", in keySet()) after removal (iterating on t).\n");
					 System.exit(-1);
				}
		  }

		  /* Now we check that m actually holds the same keys, but iterating on m. */
		  
		  for(Iterator i=m.keySet().iterator(); i.hasNext();  ) {
				Object o = i.next();
		      if (!t.containsKey(o)) {
					 System.out.println("Error: m and t differ on a key after removal (iterating on m).\n");
					 System.exit(-1);
				}
		      if (!t.keySet().contains(o)) {
					 System.out.println("Error: m and t differ on a key (in keySet()) after removal (iterating on m).\n");
					 System.exit(-1);
				}
		  }


		  /* Now we check that m actually hold the same values. */
		  
		  for(Iterator i=t.values().iterator(); i.hasNext();  ) {
				Object o = i.next();
		      if (!m.containsValue(o)) {
					 System.out.println("Error: m and t differ on a value after removal (iterating on t).\n");
					 System.exit(-1);
				}
		      if (!m.values().contains(o)) {
					 System.out.println("Error: m and t differ on a value (in values()) after removal (iterating on t).\n");
					 System.exit(-1);
				}
		  }

		  /* Now we check that m actually hold the same values, but iterating on m. */
		  
		  for(Iterator i=m.values().iterator(); i.hasNext();  ) {
				Object o = i.next();
		      if (!t.containsValue(o)) {
					 System.out.println("Error: m and t differ on a value after removal (iterating on m).\n");
					 System.exit(-1);
				}
		      if (!t.values().contains(o)) {
					 System.out.println("Error: m and t differ on a value (in values()) after removal (iterating on m).\n");
					 System.exit(-1);
				}
		  }




		  /* Now we save and read m. */

		  try {
				java.io.File ff = new java.io.File("regressionTest");
				java.io.OutputStream os = new java.io.FileOutputStream(ff);
				java.io.ObjectOutputStream oos = new java.io.ObjectOutputStream(os);
				
				oos.writeObject(m);
				oos.close();
				
				java.io.InputStream is = new java.io.FileInputStream(ff);
				java.io.ObjectInputStream ois = new java.io.ObjectInputStream(is);
				
				m = (MAP_NAME)ois.readObject();
				ois.close();
				ff.delete();
		  }
		  catch(Exception e) {
				e.printStackTrace();
				System.exit(-1);
		  }

		  /* Now we check that m actually holds that data. */
		  
		  for(Iterator i=t.keySet().iterator(); i.hasNext();  ) {
				Object o = i.next();
		      if (!valEquals(m.get(o),t.get(o))) {
					 System.out.println("Error: m and t differ on an entry after save/read.\n");
					 System.exit(-1);
				}
		  }

		  /* Now we take out of m everything, and check that it is empty. */

		  for(Iterator i=t.keySet().iterator(); i.hasNext(); ) m.remove(i.next()); 

		  if (!m.isEmpty())  {
				System.out.println("Error: m is not empty (as it should be).\n");
				System.exit(-1);
		  }

		  System.out.println("Regression test OK.\n");
		  System.exit(0);
	 }


	 public static void main( String args[] ) {
		  float f = Hash.DEFAULT_LOAD_FACTOR;
		  int n  = Integer.parseInt(args[1]);
		  if (args.length>2) f = Float.parseFloat(args[2]);
		  
		  if (args[0].equals("speedTest")) speedTest(n, f);
		  else if (args[0].equals("regressionTest")) regressionTest(n, f);
	 }

#endif

}

// Local Variables:
// mode: java
// End:
