/*
 * fastUtil 1.2: Fast & compact specialized hash-based utility classes for Java
 *
 * Copyright (C) 2002 Sebastiano Vigna 
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2, or (at your option) any
 * later version.
 *	
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *	
 * You should have received a copy of the GNU General Public License along
 * with this program; see the file COPYING.  If not, write to the Free
 * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 */

package it.unimi.dsi.fastUtil;

import it.unimi.dsi.fastUtil.Hash; // workaround to force @see/@link

import java.util.*;
import java.io.*;



/**  A type-specific hash set with with a very fast, small-footprint implementation.
 */

public final class HASHSET extends ABSTRACT_SET implements Serializable, Hash, SET {
	 /** The array of keys. */
	 private transient KEY_TYPE key[];

	 /** The array of occupancy states. */
	 private transient byte state[];

	 /** The acceptable load factor. */
	 private final float loadFactor;
	 
	 /** Index into the prime list, giving the current table size. */
	 private int p;

	 /** Table size. Must be the p-th item of {@link Hash#primes}. */
	 private transient int n;

	 /** Secondary hash for conflict resolution. Must be {@link #n}-2. */
	 private transient int n2;

	 /** Number of entries in the set. */
	 private int count;



	 /** Creates a new hash set.
	  *
	  * The actual table size is the least available prime greater than n/f.
	  *
	  * @param n the expected number of elements in the hash set. 
	  * @param f the load factor.
	  * @see Hash#primes
	  */
	 
	 public HASHSET( int n, float f ) {
		  if ( f <= 0 || f > 1 ) throw new IllegalArgumentException("Load factor must be greater than 0 and smaller than or equal to 1");
		  if ( n < 0 ) throw new IllegalArgumentException("Hash table size must be nonnegative");

		  int l = Arrays.binarySearch(primes, n+1);
		  if (l < 0) l = -l-1;

		  //System.err.println("Allocation dimension: " + primes[l]);

		  this.loadFactor = f;
		  this.n = primes[l];
		  n2 = this.n - 2;
		  p = l;
		  key = new KEY_TYPE[this.n];
		  state = new byte[this.n];
	 }
	 
	 
	 /** Creates a new hash set with {@link Hash#DEFAULT_LOAD_FACTOR} as load factor.
	  *
	  * @param n the expected number of elements in the hash set. 
	  */
	 
	 public HASHSET(int n) {
		  this(n, Hash.DEFAULT_LOAD_FACTOR);
	 }


	 /** Creates a new hash set with {@link Hash#DEFAULT_INITIAL_SIZE} elements
	  * and {@link Hash#DEFAULT_LOAD_FACTOR} as load factor.
	  */
	 
	 public HASHSET() {
		  this(Hash.DEFAULT_INITIAL_SIZE, Hash.DEFAULT_LOAD_FACTOR);
	 }
 

	 /** Creates a new hash set copying a given collection.
	  *
	  * @param c a {@link Collection} to be copied into the new hash set. 
	  */
	 
	 public HASHSET( Collection c ) {
		  this(c.size());
		  addAll(c);
	 }


	 /** Creates a new set copying the elements of an array.
	  *
	  * @param a an array to be copied into the new hash set. 
	  */
	 
	 public HASHSET( KEY_TYPE[] a ) {
		  this( a.length );
		  int i = a.length;
		  while(i-- != 0) add(a[i]);
	 }

	 /*
	  * The following private methods implements some basic building blocks used by
	  * all accessors. They are (and should be maintained) identical to those used in HashMap.drv.
	  */

	 /** Searches for a key, keeping track of a possible insertion point.
	  *
	  * The instance variables used by the search are to be passed as parameters to
	  * increase access speed.
	  *
	  * @param k the key.
	  * @param key the key array.
	  * @param state the state array.
	  * @return the index of the correct insertion point, if the key is not found; otherwise,
	  * <var>-i</var>-1, where <var>i</var> is the index of the entry containing the key.
	  */

	 private int findInsertionPoint(final KEY_TYPE k, final KEY_TYPE key[], final byte state[]) {

		  // First of all, we make the key into a positive integer.
		  final int k2i = KEY2INT(k) & 0x7FFFFFFF; 
		  // The primary hash, a.k.a. starting point.
		  int h1 = k2i % n;
		  final int s = h1;
		  // The secondary hash.
		  final int h2 = (k2i % n2) + 1;

		  while( state[h1] == OCCUPIED && ! KEY_EQUAL( key[h1], k ) ) h1 = ( h1 + h2 ) % n; // There's always a non-OCCUPIED entry.

		  if (state[h1] == FREE) return h1;
		  if (state[h1] == OCCUPIED) return -h1-1; // Necessarily, KEY_EQUAL(key[h1], k).

		  /* Tables without deletions will never use code beyond this point. */

		  final int f = h1; // Remember first available bucket for later.
		  
		  /** See the comments in the documentation of the interface Hash. */
		  while( state[h1] != FREE && ! KEY_EQUAL( key[h1], k ) ) if ( (h1 = ( h1 + h2 ) % n) == s ) return f;
		  
		  return state[h1] == OCCUPIED ? -h1-1 : f; // In the first case, necessarily, KEY_EQUAL(key[h1], k).
	 }


	 /** Searches for a key.
	  *
	  * The instance variables used by the search are to be passed as parameters to
	  * increase access speed.
	  *
	  * @param k the key.
	  * @param key the key array.
	  * @param state the state array.
	  * @return the index of the entry containing the key, or -1 if the key wasn't found.
	  */

	 private int findKey(final KEY_TYPE k, final KEY_TYPE key[], final byte state[]) {

		  // First of all, we make the key into a positive integer.
		  final int k2i = KEY2INT(k) & 0x7FFFFFFF; 
		  // The primary hash, a.k.a. starting point.
		  int h1 = k2i % n;
		  final int s = h1;
		  // The secondary hash.
		  final int h2 = (k2i % n2) + 1;
		  
		  /** See the comments in the documentation of the interface Hash. */
		  while( state[h1] != FREE && ! KEY_EQUAL(key[h1], k) ) if ( (h1 = ( h1 + h2 ) % n) == s ) return -1;
		  return state[h1] == OCCUPIED ? h1 : -1;  // In the first case, necessarily, KEY_EQUAL(key[h1], k).
	 }




	 public boolean add(final Object ok) {
		  final KEY_TYPE key[] = this.key, k = KEY2TYPE(ok);
		  final byte state[] = this.state;

		  final int i = findInsertionPoint(k, key, state);
		  if (i < 0) return false;

		  state[i] = OCCUPIED;
		  key[i] = k;
		  if ( ++count >= n * loadFactor ) rehash( Math.min(p+16, primes.length-1) ); // Table too filled, let's rehash
		  return true;
	 }
	 

#if ! ( #keyclass(Object) )

	 public boolean add(final KEY_TYPE k) {
		  final KEY_TYPE key[] = this.key;
		  final byte state[] = this.state;

		  final int i = findInsertionPoint(k, key, state);
		  if (i < 0) return false;

		  state[i] = OCCUPIED;
		  key[i] = k;
		  if ( ++count >= n * loadFactor ) rehash( Math.min(p+16, primes.length-1) ); // Table too filled, let's rehash
		  return true;
	 }


#endif


	 public boolean remove(final Object ok) {
		  final byte state[] = this.state;

		  final int i = findKey(KEY2TYPE(ok), key, state);
		  if (i < 0) return false;
		  
		  state[i] = REMOVED;
		  count--;
		  return true;
	 }



	 public void clear() {
		  this.count = 0;
		  Arrays.fill(state, FREE);
#if #keyclass(Object)
		  Arrays.fill(key, null);
#endif
	 }


	 /* We override the method in the type-specific {@link AbstractCollection}
		 with a faster version without iterators. */

    public KEY_TYPE[] TO_KEY_ARRAY( final KEY_TYPE a[] ) {
		  final KEY_TYPE key[] = this.key, result[];
		  final byte state[] = this.state;
		  int i, j, pos = 0;

		  if (a == null || a.length < count) result = new KEY_TYPE[count];
		  else result = a;

		  i = count; 
		  j = 0;

		  while(i-- != 0) {
				while( state[pos] != OCCUPIED ) pos++;
				result[j++] = key[pos++];
		  }

		  return result;
    }


	 /** Returns an iterator on this set. 
	  * The iterator can be safely cast to a type-specific iterator.
	  */

	 public Iterator iterator() {
		  return new KEY_ITERATOR() {
					 int pos = 0, last = -1, c = count;
					 
					 { 
						  final byte state[] = HASHSET.this.state;
						  final int n = HASHSET.this.n;

						  if (c != 0) while( pos < n && state[pos] != OCCUPIED ) pos++;
					 }
					 
					 public boolean hasNext() {
						  return c != 0 && pos < n;
					 }
					 
					 
#if !#keyclass(Object)
					 public KEY_TYPE NEXT_KEY() {
						  KEY_TYPE retVal;
						  final byte state[] = HASHSET.this.state;
						  final int n = HASHSET.this.n;
						  
						  if (!hasNext()) throw new NoSuchElementException();
						  retVal = key[last = pos];
						  if (--c != 0) do pos++; while( pos < n && state[pos] != OCCUPIED );
						  
						  return retVal;
					 }
#endif

					 public Object next() {
						  Object retVal;
						  final byte state[] = HASHSET.this.state;
						  final int n = HASHSET.this.n;
						  
						  if (!hasNext()) throw new NoSuchElementException();
						  retVal = KEY2OBJ(key[last = pos]);
						  if (--c != 0) do pos++; while( pos < n && state[pos] != OCCUPIED );
						  
						  return retVal;
					 }
					 
					 public void remove() {
						  if (last == -1) throw new IllegalStateException();
						  state[last] = REMOVED;
						  count--;
					 }
				};
	 }
	 

	 /** Rehashes the set, keeping the same size.
	  * This method should be called when the set underwent numerous deletions and insertions.
	  * In this case, free entries become rare, and unsuccessful searches
	  * require probing <em>all</em> entries.  For reasonable load factors this method is linear in the number of entries.
	  * You will need as much additional free memory as
	  * that occupied by the table.
	  * @return <code>true</code> if there was enough memory to rehash the set, <code>false</code> otherwise.
	  */

	 public boolean rehash() {
		  try {
				rehash(p);
		  }
		  catch(OutOfMemoryError cantDoIt) { return false; }
		  return true;
	 }

	 /** Resizes the set.
	  * @param newP the new size as an index in {@link Hash#primes}.
	  */

	 private void rehash( final int newP ) {
		  int i = 0, j = count, k2i, h1, h2;

		  //System.err.println("Rehashing to size " +  primes[newP] + "...");

		  KEY_TYPE k;

		  final int newN = primes[newP], newN2 = newN - 2;
		  final KEY_TYPE key[] = this.key, newKey[] = new KEY_TYPE[newN];
		  final byte state[] = this.state, newState[] = new byte[newN];

		  while(j-- != 0) {

				while(state[i] != OCCUPIED ) i++;

				k = key[i];
				k2i = KEY2INT(k) & 0x7FFFFFFF;

				h1 = k2i % newN;
				h2 = (k2i % newN2) + 1;

				while( newState[h1] != FREE ) h1 = ( h1 + h2 ) % newN;
				
				newState[h1] = OCCUPIED;
				newKey[h1] = k;
				i++;
		  }

		  this.n = newN;
		  this.n2 = newN2;
		  p = newP;
		  this.key = newKey;
		  this.state = newState;
	 }
	 
	 public int size() {
		  return count;
	 }

	 public boolean isEmpty() {
		  return count == 0;
	 }


	 public boolean contains(final Object ok) {
		  return findKey(KEY2TYPE(ok), key, state) >= 0;
	 }


#if !#keyclass(Object)

	 public boolean contains(final KEY_TYPE k) {
		  return findKey(k, key, state) >= 0;
	 }


	 public boolean remove(final KEY_TYPE k) {
		  final int i = findKey(k, key, state);
		  if (i < 0) return false;
		  state[i] = REMOVED;
		  count--;
		  return true;
	 }
	 

#endif

	 /*
	 public Object clone() {
		  SET c = (SET)super.clone();
		  c.key = (KEY_TYPE[])c.key.clone();
		  c.state = (byte[])c.state.clone();
		  return c;
		  }*/


	 /** Returns a hash code for this set.
	  *
	  * The hash code of a set is computed by summing the hash codes of
	  * keys of the set. Note that we correctly handle the case
	  * of <code>null</code> and that of a set being its own key
	  * (in both cases, we just sum 0).
	  *
	  * @return a hash code for this set.
	  */


	 public int hashCode() {
		  int h = 0, i = 0, j = count;
		  while(j-- != 0) {
				while(state[i] != OCCUPIED ) i++;
#if #keyclass(Object)
				if (this != key[i])
#endif
				h += KEY2INT(key[i]);
				i++;
		  }
		  return h;
	 }


	 public String toString() {
		  StringBuffer s = new StringBuffer();
		  int i = 0, j = count;

		  s.append("{");

		  while(j-- != 0) {
				if (i != 0) s.append(", ");
				while(state[i] != OCCUPIED ) i++;
#if #keyclass(Object)
				if (this == key[i]) s.append("(this set)"); else
#endif
				s.append(String.valueOf(key[i]));
				i++;
		  }

		  s.append("}");
		  return s.toString();
	 }
	 
    private void writeObject(java.io.ObjectOutputStream s) throws IOException {
		  final KEY_TYPE key[] = this.key;
		  final byte state[] = this.state;
		  int i = 0, j = count;

		  s.defaultWriteObject();
		  
		  while(j-- != 0) {
				while(state[i] != OCCUPIED ) i++;
				s.WRITE_KEY(key[i]);
				i++;
		  }
    }

    private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {
		  int count;

		  s.defaultReadObject();
		  this.n = primes[p];
		  this.n2 = this.n - 2;
		  count = this.count;

		  this.key = new KEY_TYPE[n];
		  this.state = new byte[n];
		  this.count = 0;

		  int j = count;
		  while(j-- != 0) add(s.READ_KEY());
    }

#ifndef NDEBUG

	 private static void speedTest( int n, float f ) {
		  int i;
		  SET m;
		  Set t;
		  Random r = new Random();
		  Object o;
		  long v, fm, ct;

		  for(int k=0; k<10; k++) {

				if (k>0) System.out.println();

				t = new HashSet(n);
				m = new HASHSET(n, f);
				/* First of all, we measure the time that is necessary to produce the inputs. */
		  
				v = System.currentTimeMillis();
		  
				for( i=0; i<n;  i++ ) {
				
#if #keyclass(Byte) || #keyclass(Short) || #keyclass(Character)
					 new KEY_CLASS((KEY_TYPE)(r.nextInt())) 
#elif ! #keyclass(Object)
						  new KEY_CLASS(r.NEXT_KEY()) 
#else
						  new Long(r.nextLong()) 
#endif
						  ;
				}
		  
				ct = System.currentTimeMillis() - v;
		  
				v = System.currentTimeMillis();
		  

				/* Then we add elements to t. */

				for( i=0; i<n;  i++ ) {
					 t.add( 
#if #keyclass(Byte) || #keyclass(Short) || #keyclass(Character)
							 new KEY_CLASS((KEY_TYPE)(r.nextInt())) 
#elif ! #keyclass(Object)
							 new KEY_CLASS(r.NEXT_KEY()) 
#else
							 r.nextInt() % 100 == 0 ? null : new Long(r.nextLong()) 
#endif
							 );
				}

				System.out.println("Added "+n+" elements in old HashSet (actual size: " + t.size() + ") in "+((System.currentTimeMillis() - v)) / 1000.0+"s" + 
										 " (actual time: "+((System.currentTimeMillis() - v - ct)) / 1000.0+"s)" );


				v = System.currentTimeMillis();

				/* Then we check for elements in t. */

				for( i=0; i<n;  i++ ) {
					 t.contains( 
#if #keyclass(Byte) || #keyclass(Short) || #keyclass(Character)
									new KEY_CLASS((KEY_TYPE)(r.nextInt())) 
#elif ! #keyclass(Object)
									new KEY_CLASS(r.NEXT_KEY())
#else
									r.nextInt() % 100 == 0 ? null : new Long(r.nextLong())
#endif
									);
				}

				System.out.println("Examined "+n+" elements in old HashSet in "+((System.currentTimeMillis() - v)) / 1000.0+"s"+
										 " (actual time: "+((System.currentTimeMillis() - v - ct)) / 1000.0+"s)" );


				/* Again, we measure the time that is necessary to produce the inputs. */
		  
				v = System.currentTimeMillis();
		  
				for( i=0; i<n;  i++ ) {
				
#if #keyclass(Byte) || #keyclass(Short) || #keyclass(Character)
					 r.nextInt()
#elif ! #keyclass(Object)
					 r.NEXT_KEY()
#else
					 r.nextLong()
#endif
						  ;
				}
		  
				ct = System.currentTimeMillis() - v;
		  

				v = System.currentTimeMillis();

				/* Then we add elements to m. */

				for( i=0; i<n;  i++ ) {
					 m.add( 
#if #keyclass(Byte) || #keyclass(Short) || #keyclass(Character)
							 new KEY_CLASS((KEY_TYPE)(r.nextInt())) 
#elif ! #keyclass(Object)
							 new KEY_CLASS(r.NEXT_KEY()) 
#else
							 r.nextInt() % 100 == 0 ? null : new Long(r.nextLong()) 
#endif
							 );
				}
		  
				System.out.println("Added "+n+" elements in new HashSet (actual size: " + m.size() + ") in "+((System.currentTimeMillis() - v)) / 1000.0+"s"+
										 " (actual time: "+((System.currentTimeMillis() - v - ct)) / 1000.0+"s)" );

				v = System.currentTimeMillis();

				/* Then we check for elements in m. */

				for( i=0; i<n;  i++ ) {
					 m.contains( 
#if #keyclass(Byte) || #keyclass(Short) || #keyclass(Character)
									(KEY_TYPE)r.nextInt()
#elif ! #keyclass(Object)
									r.NEXT_KEY()
#else
									r.nextInt() % 100 == 0 ? null : new Long(r.nextLong())
#endif
									);

				}
		  
				System.out.println("Examined "+n+" elements in new HashSet in "+((System.currentTimeMillis() - v)) / 1000.0+"s" +
										 " (actual time: "+((System.currentTimeMillis() - v - ct)) / 1000.0+"s)" );


				/* Then we enumerate items in t. */
				v = System.currentTimeMillis();
				
				for(Iterator it=t.iterator(); it.hasNext(); ) it.next();
				
				System.out.println("Iterated on old HashSet in "+((System.currentTimeMillis() - v)) / 1000.0+"s");
	 
				/* Then we enumerate items in m. */
				v = System.currentTimeMillis();

				for(KEY_ITERATOR it=(KEY_ITERATOR)m.iterator(); it.hasNext(); ) it.NEXT_KEY();
				
				System.out.println("Iterated on new HashSet in "+((System.currentTimeMillis() - v)) / 1000.0+"s");
	 
		  }


	 }




	 private static void regressionTest( int n, float f ) {
		  SET m = new HASHSET(Hash.DEFAULT_INITIAL_SIZE, f);
		  Set t = new HashSet();
		  Random r = new Random();

		  /* First of all, we fill t with random data. */

		  for(int i=0; i<n;  i++ ) {
				t.add( 
#if #keyclass(Byte) || #keyclass(Short) || #keyclass(Character)
						new KEY_CLASS((KEY_TYPE)(r.nextInt())) 
#elif ! #keyclass(Object)
						new KEY_CLASS(r.NEXT_KEY()) 
#else
						r.nextInt() % 100 == 0 ? null : new Long(r.nextLong()) 
#endif
						);
		  }
		  
		  /* Now we add to m the same data */
		  
		  m.addAll(t); 

		  /* Now we check that m actually holds that data. */
		  
		  for(Iterator i=t.iterator(); i.hasNext();  ) {
				Object e = i.next();
		      if (!m.contains(e)) {
					 System.out.println("Error: m and t differ on a key ("+e+") after insertion (iterating on t).\n");
					 System.exit(-1);
				}
		  }

		  /* Now we check that m actually holds that data, but iterating on m. */
		  
		  for(Iterator i=m.iterator(); i.hasNext();  ) {
				Object e = i.next();
		      if (!t.contains(e)) {
					 System.out.println("Error: m and t differ on a key ("+e+") after insertion (iterating on m).\n");
					 System.exit(-1);
				}
		  }


		  /* Now we put and remove random data in m and t, checking that the result is the same. */

		  for(int i=0; i<20*n;  i++ ) {
				KEY_TYPE T =
#if #keyclass(Byte) || #keyclass(Short) || #keyclass(Character)
					 (KEY_TYPE)r.nextInt()
#elif ! #keyclass(Object)
					 r.NEXT_KEY()
#else
					 r.nextInt() % 100 == 0 ? null : new Long(r.nextLong())
#endif
					 ;
				if (m.add(KEY2OBJ(T)) != t.add(KEY2OBJ(T))) {
					 System.out.println("Error: divergence in add() between t and m.\n");
					 System.exit(-1);
				}
				T =
#if #keyclass(Byte) || #keyclass(Short) || #keyclass(Character)
					 (KEY_TYPE)r.nextInt()
#elif ! #keyclass(Object)
					 r.NEXT_KEY()
#else
					 r.nextInt() % 100 == 0 ? null : new Long(r.nextLong())
#endif
					 ;
				if (m.remove(KEY2OBJ(T)) != t.remove(KEY2OBJ(T))) {
					 System.out.println("Error: divergence in remove() between t and m.\n");
					 System.exit(-1);
				}
		  }




		  /* Now we check that m actually holds that data. */
		  
		  for(Iterator i=t.iterator(); i.hasNext();  ) {
				Object e = i.next();
		      if (!m.contains(e)) {
					 System.out.println("Error: m and t differ on a key ("+e+") after insertion (iterating on t).\n");
					 System.exit(-1);
				}
		  }

		  /* Now we check that m actually holds that data, but iterating on m. */
		  
		  for(Iterator i=m.iterator(); i.hasNext();  ) {
				Object e = i.next();
		      if (!t.contains(e)) {
					 System.out.println("Error: m and t differ on a key ("+e+") after insertion (iterating on m).\n");
					 System.exit(-1);
				}
		  }


		  /* Now we make m into an array, make it again a set and check it is OK. */
		  KEY_TYPE a[] = m.TO_KEY_ARRAY();

		  
		  if (!new HASHSET(a).equals(m)) {
				System.out.println("Error: toArray() output (or array-based constructor) is not OK.\n");
				System.exit(-1);
		  }


		  /* Now we save and read m. */

		  try {
				java.io.File ff = new java.io.File("regressionTest");
				java.io.OutputStream os = new java.io.FileOutputStream(ff);
				java.io.ObjectOutputStream oos = new java.io.ObjectOutputStream(os);
				
				oos.writeObject(m);
				oos.close();
				
				java.io.InputStream is = new java.io.FileInputStream(ff);
				java.io.ObjectInputStream ois = new java.io.ObjectInputStream(is);
				
				m = (SET)ois.readObject();
				ois.close();
				ff.delete();
		  }
		  catch(Exception e) {
				e.printStackTrace();
				System.exit(-1);
		  }

		  /* Now we check that m actually holds that data, but iterating on m. */
		  
		  for(Iterator i=m.iterator(); i.hasNext();  ) {
				Object e = i.next();
		      if (!t.contains(e)) {
					 System.out.println("Error: m and t differ on a key ("+e+") after insertion (iterating on m).\n");
					 System.exit(-1);
				}
		  }


		  /* Now we take out of m everything, and check that it is empty. */

		  //for(Iterator i=t.iterator(); i.hasNext(); ) m.remove(i.next()); 

		  for(Iterator i=m.iterator(); i.hasNext(); ) { i.next(); i.remove();} 

		  if (!m.isEmpty())  {
				System.out.println("Error: m is not empty (as it should be).\n");
				System.exit(-1);
		  }

		  System.out.println("Regression test OK.\n");
		  System.exit(0);
	 }


	 public static void main( String args[] ) {
		  float f = Hash.DEFAULT_LOAD_FACTOR;
		  int n  = Integer.parseInt(args[1]);
		  if (args.length>2) f = Float.parseFloat(args[2]);
		  
		  if (args[0].equals("speedTest")) speedTest(n, f);
		  else if (args[0].equals("regressionTest")) regressionTest(n, f);
	 }

#endif

}


// Local Variables:
// mode: jde
// End:
