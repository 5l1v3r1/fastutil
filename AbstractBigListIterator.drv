/*		 
 * fastutil: Fast & compact type-specific collections for Java
 *
 * Copyright (C) 2002-2008 Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package PACKAGE;

import java.util.ListIterator;
import it.unimi.dsi.fastutil.BigListIterator;

/**  An abstract class facilitating the creation of type-specific {@linkplain it.unimi.dsi.fastutil.BigListIterator big-list iterators}.
 *
 * <p>This implementation provides (deprecated) implementations of {@link ListIterator#previousIndex()} and {@link ListIterator#nextIndex()} that
 * just invoke the corresponding {@link BigListIterator} methods.
 *
 * @see java.util.ListIterator
 * @see it.unimi.dsi.fastutil.BigListIterator
 */

public abstract class KEY_ABSTRACT_BIG_LIST_ITERATOR KEY_GENERIC extends KEY_ABSTRACT_BIDI_ITERATOR KEY_GENERIC implements KEY_BIG_LIST_ITERATOR KEY_GENERIC {

	protected KEY_ABSTRACT_BIG_LIST_ITERATOR() {}

#if #keys(primitive)
	/** Delegates to the corresponding type-specific method. */
	public void set( KEY_GENERIC_CLASS ok ) { set( ok.KEY_VALUE() ); }
	/** Delegates to the corresponding type-specific method. */
	public void add( KEY_GENERIC_CLASS ok ) { add( ok.KEY_VALUE() ); }
#endif

	/** This method just throws an  {@link UnsupportedOperationException}. */
	public void set( KEY_GENERIC_TYPE k ) { throw new UnsupportedOperationException(); }
	/** This method just throws an  {@link UnsupportedOperationException}. */
	public void add( KEY_GENERIC_TYPE k ) { throw new UnsupportedOperationException(); }

	/** This method just iterates the type-specific version of {@link #next()} for at most
	 * <code>n</code> times, stopping if {@link #hasNext()} becomes false.*/

	public long skip( final long n ) { 
		long i = n;
		while( i-- != 0 && hasNext() ) NEXT_KEY(); 
		return n - i - 1;
	}

	/** This method just iterates the type-specific version of {@link #previous()} for
	 * at most <code>n</code> times, stopping if {@link
	 * #hasPrevious()} becomes false. */
	public long back( final long n ) { 
		long i = n;
		while( i-- != 0 && hasPrevious() ) PREV_KEY(); 
		return n - i - 1;
	}

}
