/*		 
 * fastutil 2.61: Fast & compact specialized utility classes for Java
 *
 * Copyright (C) 2002, 2003 Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package it.unimi.dsi.fastutil;

import java.util.*;
import java.util.List;

#if ! #keyclass(Reference) && ! #keyclass(Boolean)

/** A type-specific {@link List}; provides some additional methods that use polymorphism to reduce type juggling. 
 *
 * <P>Note that this type-specific interface extends {@link java.util.Comparable}: it is expected that implementing
 * classes perform a lexicographical comparison using the standard operator "less then" for primitive types,
 * and the usual {@link Comparable.compareTo(Object) compareTo()} method for objects.
 *
 * @see List
 */

public interface LIST extends List, Comparable, COLLECTION {
#else

/** A type-specific {@link List}; provides some additional methods that use polymorphism to reduce type juggling. 
 *
 * @see List
 */

public interface LIST extends List, COLLECTION {
#endif

	/** Returns a type-specific list iterator on the list.
	 *
	 * <P>The iterator returned by the {@link #listIterator()} method and by this
	 * method are identical; however, using this method you can save a type casting.
	 *
	 * @see #listIterator()
	 */
	KEY_LIST_ITERATOR KEY_LIST_ITERATOR_METHOD();

	/** Returns a type-specific list iterator on the list starting at a given index.
	 *
	 * <P>The iterator returned by the {@link #listIterator()} method and by this
	 * method are identical; however, using this method you can save a type casting.
	 *
	 * @see #listIterator(int)
	 */
	KEY_LIST_ITERATOR KEY_LIST_ITERATOR_METHOD( int index );

	/**
	 * @see List#subList(int,int)
	 */

	LIST SUBLIST( int from, int to );

	/** Sets the size of this list.
	 *
	 * <P>If the specified size is smaller than the current size, the last elements are
	 * discarded. Otherwise, they are filled with 0/<code>null</code>/<code>false</code>.
	 *
	 * @param size the new size.
	 */

	public void size( int size );

#if ! #keyclass(Object) && ! #keyclass(Reference)

	/**
	 * @see List#add(int,Object)
	 */
	void add( int index, KEY_TYPE key );

	/**
	 * @see List#add(int,Object)
	 */
	boolean addAll( int index, COLLECTION c );

	/**
	 * @see List#get(int)
	 */
	KEY_TYPE GET_KEY( int index );

	/**
	 * @see List#indexOf(Object)
	 */
	int indexOf( KEY_TYPE k );

	/**
	 * @see List#lastIndexOf(Object)
	 */
	int lastIndexOf( KEY_TYPE k );

	/**
	 * @see List#remove(int)
	 */
	KEY_TYPE REMOVE_KEY( int index );

	/**
	 * @see List#set(int,Object)
	 */
	KEY_TYPE set( int index, KEY_TYPE k );

#endif


}

// Local Variables:
// mode: jde
// tab-width: 4
// End:
