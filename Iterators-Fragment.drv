private static class KEY_ARRAY_ITERATOR extends KEY_ABSTRACT_ITERATOR {
	private final KEY_TYPE array[];
	private int offset, length;

	public KEY_ARRAY_ITERATOR( KEY_TYPE array[], int offset, int length ) {
		this.array = array;
		this.offset = offset;
		this.length = length;
	}
	
	public boolean hasNext() { return length != 0; }

	public KEY_TYPE NEXT_KEY() {
		if ( ! hasNext() ) throw new NoSuchElementException();
		length--;
		return array[ offset++ ];
	}
}


/** Wraps the given part of an array into an iterator.
 *
 * <P>The type-specific iterator returned by this method will iterate
 * <code>length</code> times, returning consecutive elements of the given
 * array starting from the one with index <code>offset</code>.
 *
 * @param array an array to wrap into an iterator.
 * @param offset the first element of the array to be returned.
 * @param length the number of elements to return.
 */
public static KEY_ITERATOR wrap( KEY_TYPE array[], int offset, int length ) {
	if ( offset < 0 || offset + length > array.length ) throw new IllegalArgumentException();
	return new KEY_ARRAY_ITERATOR( array, offset, length );
}

/** Wraps the given array into an iterator.
 *
 * <P>The type-specific iterator returned by this method will return
 * all elements of the given array.
 *
 * @param array an array to wrap into an iterator.
 */
public static KEY_ITERATOR wrap( KEY_TYPE array[] ) {
	return new KEY_ARRAY_ITERATOR( array, 0, array.length );
}


// Local Variables:
// mode: jde
// tab-width: 4
// End:
