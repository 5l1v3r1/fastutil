/*		 
 * Copyright (C) 2002-2016 Sebastiano Vigna
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 */


package PACKAGE;

import java.util.ListIterator;
import it.unimi.dsi.fastutil.BigListIterator;

/**  An abstract class facilitating the creation of type-specific {@linkplain it.unimi.dsi.fastutil.BigListIterator big-list iterators}.
 *
 * <p>This implementation provides (deprecated) implementations of {@link ListIterator#previousIndex()} and {@link ListIterator#nextIndex()} that
 * just invoke the corresponding {@link BigListIterator} methods.
 *
 * @see java.util.ListIterator
 * @see it.unimi.dsi.fastutil.BigListIterator
 */

public abstract class KEY_ABSTRACT_BIG_LIST_ITERATOR KEY_GENERIC extends KEY_ABSTRACT_BIDI_ITERATOR KEY_GENERIC implements KEY_BIG_LIST_ITERATOR KEY_GENERIC {

	protected KEY_ABSTRACT_BIG_LIST_ITERATOR() {}

	/** {@inheritDoc}
	 * <P>This implementation always throws an {@link UnsupportedOperationException}. */
	@Override
	public void set(KEY_GENERIC_TYPE k) {
		throw new UnsupportedOperationException();
	}

	/** {@inheritDoc}
	 * <P>This implementation always throws an {@link UnsupportedOperationException}. */
	@Override
	public void add(KEY_GENERIC_TYPE k) {
		throw new UnsupportedOperationException();
	}

#if KEYS_PRIMITIVE
	/** {@inheritDoc}
	 * <p>This implementation delegates to the corresponding type-specific method.
	 * @deprecated Please use the corresponding type-specific method instead. */
	@Deprecated
	@Override
	public void set(KEY_GENERIC_CLASS ok) {
		set(ok.KEY_VALUE());
	}

	/** {@inheritDoc}
	 * <p>This implementation delegates to the corresponding type-specific method.
	 * @deprecated Please use the corresponding type-specific method instead. */
	@Deprecated
	@Override
	public void add(KEY_GENERIC_CLASS ok) {
		add(ok.KEY_VALUE());
	}
#endif

	/** {@inheritDoc}
	 * <P>This implementaion iterates the type-specific version of {@link #next()} for at most
	 * {@code n} times, stopping if {@link #hasNext()} becomes false.
	 *
	 * @param n the number of elements to skip.
	 * @return the number of elements actually skipped.
	 */
	@Override
	public long skip(final long n) { 
		long i = n;
		while(i-- != 0 && hasNext()) NEXT_KEY(); 
		return n - i - 1;
	}

	/** {@inheritDoc}
	 *  <P>This implemntation iterates the type-specific version of {@link #previous()} for
	 * at most {@code n} times, stopping if {@link #hasPrevious()} becomes false. 
	 *
	 * @param n the number of elements to skip backwards.
	 * @return the number of elements actually skipped.
	 */
	public long back(final long n) { 
		long i = n;
		while(i-- != 0 && hasPrevious()) PREV_KEY(); 
		return n - i - 1;
	}
}
