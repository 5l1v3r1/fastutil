/*
 * Copyright (C) 2002-2017 Sebastiano Vigna
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package PACKAGE;

import it.unimi.dsi.fastutil.Function;

#ifdef JDK_PRIMITIVE_FUNCTION
import java.util.function.JDK_PRIMITIVE_FUNCTION;
#endif

/** A type-specific {@link Function}; provides some additional methods that use polymorphism to avoid (un)boxing.
 *
 * <P>Type-specific versions of <code>get()</code>, <code>put()</code> and
 * <code>remove()</code> cannot rely on {@code null} to denote absence of
 * a key. Rather, they return a {@linkplain #defaultReturnValue() default
 * return value}, which is set to 0 cast to the return type (<code>false</code>
 * for booleans) at creation, but can be changed using the
 * <code>defaultReturnValue()</code> method.
 *
 * <P>For uniformity reasons, even maps returning objects implement the default
 * return value (of course, in this case the default return value is
 * initialized to {@code null}).
 *
 * <P><strong>Warning:</strong> to fall in line as much as possible with the
 * {@linkplain java.util.Map standard map interface}, it is strongly suggested
 * that standard versions of <code>get()</code>, <code>put()</code> and
 * <code>remove()</code> for maps with primitive-type values <em>return
 * {@code null} to denote missing keys</em> rather than wrap the default
 * return value in an object (of course, for maps with object keys and values
 * this is not possible, as there is no type-specific version).
 *
 * @see Function
 */

#ifdef JDK_PRIMITIVE_FUNCTION
public interface FUNCTION KEY_VALUE_GENERIC extends Function<KEY_GENERIC_CLASS, VALUE_GENERIC_CLASS>, JDK_PRIMITIVE_FUNCTION KEY_GENERIC VALUE_GENERIC {
#else
public interface FUNCTION KEY_VALUE_GENERIC extends Function<KEY_GENERIC_CLASS, VALUE_GENERIC_CLASS> {
#endif

#ifdef JDK_PRIMITIVE_FUNCTION
#if KEY_WIDENED
	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead. */
	@Deprecated
#endif
	@Override
	default VALUE_GENERIC_TYPE_WIDENED JDK_PRIMITIVE_FUNCTION_APPLY(KEY_GENERIC_TYPE_WIDENED operand) { return GET_VALUE(KEY_NARROWING(operand)); }
#endif

#if KEYS_PRIMITIVE || VALUES_PRIMITIVE

	/** Adds a pair to the map (optional operation).
	 *
	 * @param key the key.
	 * @param value the value.
	 * @return the old value, or the {@linkplain #defaultReturnValue() default return value} if no value was present for the given key.
	 * @see Function#put(Object,Object)
	 */

	default VALUE_GENERIC_TYPE put(final KEY_GENERIC_TYPE key, final VALUE_GENERIC_TYPE value) {
		throw new UnsupportedOperationException();
	}

	/** Returns the value to which the given key is mapped.
	 *
	 * @param key the key.
	 * @return the corresponding value, or the {@linkplain #defaultReturnValue() default return value} if no value was present for the given key.
	 * @see Function#get(Object)
	 */

	VALUE_GENERIC_TYPE GET_VALUE(KEY_TYPE key);

	/** Removes the mapping with the given key (optional operation).
	 * @param key the key.
	 * @return the old value, or the {@linkplain #defaultReturnValue() default return value} if no value was present for the given key.
	 * @see Function#remove(Object)
	 */

	default VALUE_GENERIC_TYPE REMOVE_VALUE(final KEY_TYPE key) {
		throw new UnsupportedOperationException();
	}

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead. */
	@Deprecated
	@Override
	default VALUE_GENERIC_CLASS put(final KEY_GENERIC_CLASS key, final VALUE_GENERIC_CLASS value) {
		final KEY_GENERIC_TYPE k = KEY_CLASS2TYPE(key);
#if VALUES_PRIMITIVE
		final boolean containsKey = containsKey(k);
		final VALUE_GENERIC_TYPE v = put(k, VALUE_CLASS2TYPE(value));
		return containsKey ? VALUE2OBJ(v) : null;
#else
		return put(k, value);
#endif
	}

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead. */
	@Deprecated
	@Override
	default VALUE_GENERIC_CLASS get(final Object key) {
#if KEYS_PRIMITIVE
		if (key == null) return null;
#endif
		final KEY_TYPE k = KEY_OBJ2TYPE(key);
		final VALUE_GENERIC_TYPE v = GET_VALUE(k);
		return (v != defaultReturnValue() || containsKey(k)) ? VALUE2OBJ(v) : null;
	}

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead. */
	@Deprecated
	@Override
	default VALUE_GENERIC_CLASS remove(final Object key) {
#if KEYS_PRIMITIVE
		if (key == null) return null;
#endif
		final KEY_TYPE k = KEY_OBJ2TYPE(key);
		return containsKey(k) ? VALUE2OBJ(REMOVE_VALUE(k)) : null;
	}

#endif

#if KEYS_PRIMITIVE

	/** Returns {@code true} if this map contains a mapping for the specified key.
	 * @see Function#containsKey(Object)
	 */

	boolean containsKey(KEY_TYPE key);

	/** {@inheritDoc}
	 * @deprecated Please use the corresponding type-specific method instead. */

	@Deprecated
	@Override
	default boolean containsKey(final Object key) {
		return key == null ? false : containsKey(KEY_OBJ2TYPE(key));
	}

#endif

	/** Sets the default return value.
	 *
	 * This value must be returned by type-specific versions of
	 * <code>get()</code>, <code>put()</code> and <code>remove()</code> to
	 * denote that the map does not contain the specified key. It must be
	 * 0/<code>false</code>/{@code null} by default.
	 *
	 * @param rv the new default return value.
	 * @see #defaultReturnValue()
	 */

	void defaultReturnValue(VALUE_GENERIC_TYPE rv);


	/** Gets the default return value.
	 *
	 * @return the current default return value.
	 */

	VALUE_GENERIC_TYPE defaultReturnValue();
}
