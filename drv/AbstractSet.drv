/*		 
 * Copyright (C) 2002-2016 Sebastiano Vigna
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 */


package PACKAGE;

import java.util.Set;

/**  An abstract class providing basic methods for sets implementing a type-specific interface. 
 *
 * <p><strong>Warning</strong>: As in the case of a type-specific abstract collection,
 * the type-specific deletion method of a type-specific abstract
 * set is <code>rem()</code>, rather then <code>remove()</code>. A
 * subclass must thus override <code>rem()</code>, rather than
 * <code>remove()</code>, to make all inherited methods work properly.
 * Note, however, that this class specifies a type-specific <code>remove()</code>
 * that just invokes <code>rem()</code>, so final users of the class do not
 * need to know about <code>rem()</code>.
 */

public abstract class ABSTRACT_SET KEY_GENERIC extends ABSTRACT_COLLECTION KEY_GENERIC implements Cloneable, SET KEY_GENERIC {
	 
	protected ABSTRACT_SET() {}

	@Override
	public abstract KEY_ITERATOR KEY_GENERIC iterator();

	@Override
	public boolean equals( final Object o ) {
		if ( o == this ) return true;
		if ( !( o instanceof Set ) ) return false;

		Set<?> s = (Set<?>) o;
		if ( s.size() != size() ) return false;
		return containsAll(s);
	}


	/** Returns a hash code for this set.
	 *
	 * The hash code of a set is computed by summing the hash codes of
	 * its elements.
	 *
	 * @return a hash code for this set.
	 */
	@Override
	public int hashCode() {
		int h = 0, n = size();
		KEY_ITERATOR KEY_GENERIC i = iterator();
		KEY_GENERIC_TYPE k;

		while( n-- != 0 ) {
			k = i.NEXT_KEY(); // We need k because KEY2JAVAHASH() is a macro with repeated evaluation.
			h += KEY2JAVAHASH( k );
		}
		return h;
	}


#if KEYS_PRIMITIVE
	/** Delegates to the type-specific <code>rem()</code> method. */
	@Override
	public boolean remove( KEY_TYPE k ) {
		return rem( k );
	}
#endif
}
