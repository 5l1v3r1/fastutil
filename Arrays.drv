/*		 
 * fastutil: Fast & compact type-specific collections for Java
 *
 * Copyright (C) 2002, 2003, 2004 Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package PACKAGE;

import it.unimi.dsi.fastutil.Arrays;

/** A class providing static methods and objects that do useful things with type-specific arrays.
 *
 * In particular, the <code>ensureCapacity()</code>, <code>grow()</code>,
 * <code>trim()</code> and <code>setLength()</code> methods allow to handle
 * arrays much like array lists. This can be very useful when efficiency (or
 * syntactic simplicity) reasons make array lists unsuitable.
 *
 * @see java.util.Arrays
 */

public class ARRAYS {

	/** The inverse of the golden ratio times 2<sup>16</sup>. */
	private static final long ONEOVERPHI = 106039;

	private ARRAYS() {}

	/** A static, final, empty array. */
	public final static KEY_TYPE[] EMPTY_ARRAY = new KEY_TYPE[ 0 ];

	/** Ensures that an array can contain the given number of entries.
	 *
	 * <P>If you cannot foresee whether this array will need again to be
	 * enlarged, you should probably use <code>grow()</code> instead.
	 *
	 * @param array an array.
	 * @param length the new minimum length for this array.
	 * @return <code>array</code>, if it contains <code>length</code> entries or more; otherwise,
	 * an array with <code>length</code> entries whose first <code>array.length</code>
	 * entries are the same as those of <code>array</code>.
	 */
	public static KEY_TYPE[] ensureCapacity( final KEY_TYPE array[], final int length ) {
		if ( length > array.length ) {
			KEY_TYPE t[] = new KEY_TYPE[ length ];
			System.arraycopy( array, 0, t, 0, array.length );
			return t;
		}
		return array;
	}

	/** Ensures that an array can contain the given number of entries, preserving just a part of the array.
	 *
	 * @param array an array.
	 * @param length the new minimum length for this array.
	 * @param preserve the number of elements of the array that must be preserved in case a new allocation is necessary.
	 * @return <code>array</code>, if it can contain <code>length</code> entries or more; otherwise,
	 * an array with <code>length</code> entries whose first <code>preserve</code>
	 * entries are the same as those of <code>array</code>.
	 */
	public static KEY_TYPE[] ensureCapacity( final KEY_TYPE array[], final int length, final int preserve ) {
		if ( length > array.length ) {
			KEY_TYPE t[] = new KEY_TYPE[ length ];
			System.arraycopy( array, 0, t, 0, preserve );
			return t;
		}
		return array;
	}

	/** Grows the given array to the maximum between the given length and
	 * the current length divided by the golden ratio, provided that the given
	 * length is larger than the current length.
	 *
	 * <P> Dividing by the golden ratio (&phi;) approximately increases the array
	 * length by 1.618. If you want complete control on the array growth, you
	 * should probably use <code>ensureCapacity()</code> instead.
	 *
	 * @param array an array.
	 * @param length the new minimum length for this array.
	 * @return <code>array</code>, if it can contain <code>length</code>
	 * entries; otherwise, an array with
	 * max(<code>length</code>,<code>array.length</code>/&phi;) entries whose first
	 * <code>array.length</code> entries are the same as those of <code>array</code>.
	 * */

	public static KEY_TYPE[] grow( final KEY_TYPE array[], final int length ) {
		if ( length > array.length ) {
			KEY_TYPE t[] = new KEY_TYPE[ (int)Math.min( Math.max( ( ONEOVERPHI * array.length ) >>> 16, length ), Integer.MAX_VALUE ) ];
			System.arraycopy( array, 0, t, 0, array.length );
			return t;
		}
		return array;
	}

	/** Grows the given array to the maximum between the given length and
	 * the current length divided by the golden ratio, provided that the given
	 * length is larger than the current length, preserving just a part of the array.
	 *
	 * <P> Dividing by the golden ratio (&phi;) approximately increases the array
	 * length by 1.618. If you want complete control on the array growth, you
	 * should probably use <code>ensureCapacity()</code> instead.
	 *
	 * @param array an array.
	 * @param length the new minimum length for this array.
	 * @param preserve the number of elements of the array that must be preserved in case a new allocation is necessary.
	 * @return <code>array</code>, if it can contain <code>length</code>
	 * entries; otherwise, an array with
	 * max(<code>length</code>,<code>array.length</code>/&phi;) entries whose first
	 * <code>preserve</code> entries are the same as those of <code>array</code>.
	 * */

	public static KEY_TYPE[] grow( final KEY_TYPE array[], final int length, final int preserve ) {
		if ( length > array.length ) {
			KEY_TYPE t[] = new KEY_TYPE[ (int)Math.min( Math.max( ( ONEOVERPHI * array.length ) >>> 16, length ), Integer.MAX_VALUE ) ];
			System.arraycopy( array, 0, t, 0, preserve );
			return t;
		}
		return array;
	}

	/** Trims the given array to the given length.
	 *
	 * @param array an array.
	 * @param length the new maximum length for the array.
	 * @return <code>array</code>, if it contains <code>length</code>
	 * entries or less; otherwise, an array with
	 * <code>length</code> entries whose entries are the same as
	 * the first <code>length</code> entries of <code>array</code>.
	 * 
	 */

	public static KEY_TYPE[] trim( final KEY_TYPE array[], final int length ) {
		if ( length >= array.length ) return array;
		if ( length == 0 ) return EMPTY_ARRAY;
		KEY_TYPE t[] = new KEY_TYPE[ length ];
		System.arraycopy( array, 0, t, 0, length );
		return t;
	}

	/** Sets the length of the given array.
	 *
	 * @param array an array.
	 * @param length the new length for the array.
	 * @return <code>array</code>, if it contains exactly <code>length</code>
	 * entries; otherwise, if it contains <em>more</em> than
	 * <code>length</code> entries, an array with <code>length</code> entries
	 * whose entries are the same as the first <code>length</code> entries of
	 * <code>array</code>; otherwise, an array with <code>length</code> entries
	 * whose first <code>array.length</code> entries are the same as those of
	 * <code>array</code>.
	 * 
	 */

	public static KEY_TYPE[] setLength( final KEY_TYPE array[], final int length ) {
		if ( length == array.length ) return array;
		if ( length == 0 ) return EMPTY_ARRAY;
		if ( length < array.length ) return trim( array, length );
		return ensureCapacity( array, length );
	}

	/** Returns a copy of a portion of an array.
	 *
	 * @param array an array.
	 * @param offset the first element to copy.
	 * @param length the number of elements to copy.
	 * @return a new array containing <code>length</code> elements of <code>array</code> starting at <code>offset</code>.
	 */

	public static KEY_TYPE[] copy( final KEY_TYPE array[], final int offset, final int length ) {
		ensureOffsetLength( array, offset, length );
		if ( length == 0 ) return EMPTY_ARRAY;
		final KEY_TYPE[] a = new KEY_TYPE[ length ];
		System.arraycopy( array, offset, a, 0, length );
		return a;
	}

	/** Returns a copy of an array.
	 *
	 * @param array an array.
	 * @return a copy of <code>array</code>.
	 */

	public static KEY_TYPE[] copy( final KEY_TYPE array[] ) {
		return copy( array, 0, array.length );
	}

	/** Fills the given array with the given value.
	 *
	 * <P>This method uses a backward loop. It is significantly faster than the corresponding
	 * method in {@link java.util.Arrays}.
	 *
	 * @param array an array.
	 * @param value the new value for all elements of the array.
	 */

	public static void fill( final KEY_TYPE array[], final KEY_TYPE value ) {
		int i = array.length;
		while( i-- != 0 ) array[ i ] = value;
	}

	/** Fills a portion of the given array with the given value.
	 *
	 * <P>If possible (i.e., <code>from</code> is 0) this method uses a
	 * backward loop. In this case, it is significantly faster than the
	 * corresponding method in {@link java.util.Arrays}.
	 *
	 * @param array an array.
	 * @param from the starting index of the portion to fill.
	 * @param to the end index of the portion to fill.
	 * @param value the new value for all elements of the specified portion of the array.
	 */

	public static void fill( final KEY_TYPE array[], final int from, int to, final KEY_TYPE value ) {
		ensureFromTo( array, from, to );
		if ( from == 0 ) while( to-- != 0 ) array[ to ] = value;
		else for( int i = from; i < to; i++ ) array[ i ] = value;
	}


	/** Ensures that a range given by its first (inclusive) and last (exclusive) elements fits an array.
	 *
	 * <P>This method may be used whenever an array range check is needed.
	 *
	 * @param a an array.
	 * @param from a start index (inclusive).
	 * @param to an end index (inclusive).
	 * @throws IllegalArgumentException if <code>from</code> is greater than <code>to</code>.
	 * @throws ArrayIndexOutOfBoundsException if <code>from</code> or <code>to</code> are greater than the array length or negative.
	 */
	public static void ensureFromTo( final KEY_TYPE[] a, final int from, final int to ) {
		Arrays.ensureFromTo( a.length, from, to );
	}

	/** Ensures that a range given by an offset and a length fits an array.
	 *
	 * <P>This method may be used whenever an array range check is needed.
	 *
	 * @param a an array.
	 * @param offset a start index.
	 * @param length a length (the number of elements in the range).
	 * @throws IllegalArgumentException if <code>length</code> is negative.
	 * @throws ArrayIndexOutOfBoundsException if <code>offset</code> is negative or <code>offset</code>+<code>length</code> is greater than the array length.
	 */
	public static void ensureOffsetLength( final KEY_TYPE[] a, final int offset, final int length ) {
		Arrays.ensureOffsetLength( a.length, offset, length );
	}

}

// Local Variables:
// mode: jde
// tab-width: 4
// End:
