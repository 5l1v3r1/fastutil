/*		 
 * fastdata: Fast & compact type-specific data structures for Java
 *
 * Copyright (C) 2002, 2003 Paolo Boldi and Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package PACKAGE;

import it.unimi.dsi.fastutil.ints.IntArrays;
import it.unimi.dsi.fastutil.AbstractSemiIndirectPriorityQueue;

import java.util.NoSuchElementException;
import java.util.Comparator;

/** A type-specific queue that keeps its elements ordered in two ways at the same time.
 *
 * <P>A sesqui-indirect double priority queue uses two distinct comparators (called <em>primary</em>
 * and the <em>secondary</em>) to keep its elements ordered. It makes it possible to access the
 * first element w.r.t. the secondary comparatory using {@link #secondaryFirst()}. The remaining methods
 * work like those of a {@link it.unimi.dsi.fastutil.SemiIndirectPriorityQueue} based on the
 * primary comparator.
 *
 * Either comparator may be <code>null</code>, indicating that natural comparison should take place. Of course,
 * it makes little sense having them equal.
 */

public class HEAP_SESQUI_INDIRECT_DOUBLE_PRIORITY_QUEUE extends HEAP_SEMI_INDIRECT_PRIORITY_QUEUE {

	/** The secondary indirect heap. */
	protected HEAP_INDIRECT_PRIORITY_QUEUE secondaryQueue;

	/** Creates a new empty heap without elements with a given capacity.
	 *
	 * @param refArray the reference array.
	 * @param capacity the initial capacity of this heap.
	 * @param c the primary comparator used in this heap, or <code>null</code> for the natural order.
	 * @param d the secondary comparator used in this heap, or <code>null</code> for the natural order.
	 */
	public HEAP_SESQUI_INDIRECT_DOUBLE_PRIORITY_QUEUE( KEY_TYPE[] refArray, int capacity, KEY_COMPARATOR c, KEY_COMPARATOR d ) {
		super( refArray, capacity, c );
		secondaryQueue = new HEAP_INDIRECT_PRIORITY_QUEUE( refArray, capacity, d );
	}


	/** Creates a new empty heap without elements with a given capacity.
	 *
	 * <P>This constructor uses as secondary comparator the opposite order of <code>c</code>.
	 *
	 * @param refArray the reference array.
	 * @param capacity the initial capacity of this heap.
	 * @param c the primary comparator used in this heap, or <code>null</code> for the natural order.
	 */
	public HEAP_SESQUI_INDIRECT_DOUBLE_PRIORITY_QUEUE( KEY_TYPE[] refArray, int capacity, KEY_COMPARATOR c ) {
		super( refArray, capacity, c );
		secondaryQueue = new HEAP_INDIRECT_PRIORITY_QUEUE( refArray, capacity, c == null ? COMPARATORS.OPPOSITE_COMPARATOR : COMPARATORS.oppositeComparator( c ) );
	}


	/** Creates a new empty heap without elements with capacity equal to the length of the reference array.
	 *
	 * @param refArray the reference array.
	 * @param c the primary comparator used in this heap, or <code>null</code> for the natural order.
	 * @param d the secondary comparator used in this heap, or <code>null</code> for the natural order.
	 */
	public HEAP_SESQUI_INDIRECT_DOUBLE_PRIORITY_QUEUE( KEY_TYPE[] refArray, KEY_COMPARATOR c, KEY_COMPARATOR d ) {
		this( refArray, refArray.length, c, d );
	}

	/** Creates a new empty heap without elements with capacity equal to the length of the reference array.
	 *
	 * <P>This constructor uses as secondary comparator the opposite order of <code>c</code>.
	 *
	 * @param refArray the reference array.
	 * @param c the primary comparator used in this heap, or <code>null</code> for the natural order.
	 */
	public HEAP_SESQUI_INDIRECT_DOUBLE_PRIORITY_QUEUE( KEY_TYPE[] refArray, KEY_COMPARATOR c ) {
		this( refArray, refArray.length, c, c == null ? COMPARATORS.OPPOSITE_COMPARATOR : COMPARATORS.oppositeComparator( c ) );
	}

	public void enqueue( int x ) {
		super.enqueue( x );
		secondaryQueue.enqueue( x );
	}

	public int dequeue() {
		final int result = super.dequeue();
		secondaryQueue.remove( result );
		return result;
	}

	public int secondaryFirst() {
		return secondaryQueue.first();
	}


	public void changed() {
		super.changed();
		secondaryQueue.changed( heap[ 0 ] );
	}

	public void clear() { 
		super.clear();
		secondaryQueue.clear();
	}

	/** Trims the backing array so that it has exactly {@link #size()} elements.
	 */

	public void trim() {
		super.trim();
		secondaryQueue.trim();
	}

	public Comparator secondaryComparator() { return secondaryQueue.comparator(); }
}

// Local Variables:
// mode: jde
// tab-width: 4
// End:
