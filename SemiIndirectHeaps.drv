/*		 
 * fastutil: Fast & compact type-specific collections for Java
 *
 * Copyright (C) 2003 Paolo Boldi and Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package PACKAGE;

import java.util.Comparator;

import it.unimi.dsi.fastutil.ints.IntArrays;

/** A class providing static methods that do useful things with semi-indirect heaps.
 *
 * <P>A semi-indirect heap is based on a <em>reference array</em>. Elements of
 * a semi-indirect heap are integers that index the reference array (note that
 * in an <em>indirect</em> heap you can also map elements of the reference
 * array to heap positions).  
 */

public class SEMI_INDIRECT_HEAPS {

	private SEMI_INDIRECT_HEAPS() {}

	/** Moves the given element down into the semi-indirect heap until it reaches its final position.
	 *
	 * @param refArray the reference array.
	 * @param heap the semi-indirect heap (starting at 0).
	 * @param size the number of elements in the heap.
	 * @param i the position to be heapified.
	 * @param c a type-specific comparator, or <code>null</code> for the natural order.
	 * @return the new position of the element of index <code>i</code>.
	 */

	static public int downHeap( final KEY_TYPE[] refArray, final int[] heap, final int size, int i, final KEY_COMPARATOR c ) {
		final int e = heap[ i ];
		int child;

		if ( c == null )
			while ( ( child = 2 * i + 1 ) < size ) {
				if ( child + 1 < size && KEY_CMP( refArray[ heap[ child + 1 ] ], refArray[ heap[ child ] ] ) < 0 ) child++;
				if ( KEY_CMP( refArray[ e ], refArray[ heap[ child ] ] ) <= 0 ) break;
				heap[ i ] = heap[ child ];
				i = child;
			}
		else 
			while ( ( child = 2 * i + 1 ) < size ) {
				if ( child + 1 < size && c.compare( refArray[ heap[ child + 1 ] ], refArray[ heap[ child ] ] ) < 0 ) child++;
				if ( c.compare( refArray[ e ], refArray[ heap[ child ] ] ) <= 0 ) break;
				heap[ i ] = heap[ child ];
				i = child;
			}

		heap[ i ] = e;
		return i;
	}

	/** Moves the given element up in the semi-indirect heap until it reaches the highest possible position.
	 *
	 * Note that in principle after this call the heap property may be violated.
	 * 
	 * @param refArray the reference array.
	 * @param heap the semi-indirect heap (starting at 0).
	 * @param size the number of elements in the heap.
	 * @param i the position to be made swimming.
	 * @param c a type-specific comparator, or <code>null</code> for the natural order.
	 * @return the new position of the element of index <code>i</code>.
	 */

	static public int upHeap( final KEY_TYPE[] refArray, final int[] heap, final int size, int i, final KEY_COMPARATOR c ) {
		final int e = heap[ i ];
		int parent;

		if ( c == null )
			while ( i != 0 && ( parent = ( i - 1 ) / 2 ) >= 0 ) {
				if ( KEY_CMP( refArray[ heap[ parent ] ], refArray[ e ] ) <= 0 ) break;
				heap[ i ] = heap[ parent ]; 
				i = parent;
			}
		else
			while ( i != 0 && ( parent = ( i - 1 ) / 2 ) >= 0 ) {
				if ( c.compare( refArray[ heap[ parent ] ], refArray[ e ] ) <= 0 ) break;
				heap[ i ] = heap[ parent ]; 
				i = parent;
			}

		heap[ i ] = e;

		return i;
	}

	/** Creates a semi-indirect heap in the given array.
	 *
	 * @param refArray the reference array.
	 * @param offset the first element of the reference array to be put in the heap.
	 * @param length the number of elements to be put in the heap.
	 * @param heap the array where the heap is to be created.
	 * @param c a type-specific comparator, or <code>null</code> for the natural order.
	 */

	static public void makeHeap( final KEY_TYPE[] refArray, final int offset, final int length, final int[] heap, final KEY_COMPARATOR c ) {
		ARRAYS.ensureOffsetLength( refArray, offset, length );
		if ( heap.length < length ) throw new IllegalArgumentException( "The heap length (" + heap.length + ") is smaller than the number of elements (" + length + ")" );

		int i = length;
		while( i-- != 0 ) heap[ i ] = offset + i;

		i = length / 2;
		while( i-- != 0 ) downHeap( refArray, heap, length, i, c );
	}

	/** Creates a semi-indirect heap, allocating its backing array.
	 *
	 * @param refArray the reference array.
	 * @param offset the first element of the reference array to be put in the heap.
	 * @param length the number of elements to be put in the heap.
	 * @param c a type-specific comparator, or <code>null</code> for the natural order.
	 */

	static public int[] makeHeap( final KEY_TYPE[] refArray, final int offset, final int length, final KEY_COMPARATOR c ) {
		int[] heap = length <= 0 ? IntArrays.EMPTY_ARRAY : new int[ length ];
		makeHeap( refArray, offset, length, heap, c );
		return heap;
	}

}

// Local Variables:
// mode: jde
// tab-width: 4
// End:
