/*		 
 * fastdata: Fast & compact type-specific data structures for Java
 *
 * Copyright (C) 2002, 2003 Paolo Boldi and Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package it.unimi.dsi.fastutil;

/** A type-specific priority queue.
 *
 */

public interface PriorityQueue {

	/** Enqueues a new element.
	 *
	 * @param x the element to enqueue..
	 */

	void enqueue( KEY_TYPE x );

	/** Dequeues the {@link #front()} element from the queue.
	 *
	 * @return the dequeued element.
	 * @throw NoSuchElementException if the queue is empty.
	 */

	KEY_TYPE DEQUEUE_KEY();

	/** Returns the front element of the queue.
	 *
	 * @return the front element.
	 * @throws NoSuchElementException if the queue is empty.
	 */

	Object FRONT_KEY();

	/** Returns the rear element of the queue, that is, the element the would be dequeued last (optional operation).
	 *
	 * @return the rear element.
	 * @throws NoSuchElementException if the queue is empty.
	 */

	Object REAR_KEY();

}

// Local Variables:
// mode: jde
// tab-width: 4
// End:
