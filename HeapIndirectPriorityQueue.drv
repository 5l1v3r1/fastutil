/*		 
 * fastdata: Fast & compact type-specific data structures for Java
 *
 * Copyright (C) 2002, 2003 Paolo Boldi and Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package PACKAGE;

import it.unimi.dsi.fastutil.ints.IntArrays;
import it.unimi.dsi.fastutil.AbstractSemiIndirectPriorityQueue;

import java.util.NoSuchElementException;
import java.util.Comparator;

/** A type-specific {@link it.unimi.dsi.fastutil.IndirectPriorityQueue}; provides some additional methods that use polymorphism to reduce type juggling. 
 *
 * <P>Instances of this class use as reference list a <em>reference array</em>,
 * which must be provided with each contructor.
 *
 */

public class HEAP_INDIRECT_PRIORITY_QUEUE extends HEAP_SEMI_INDIRECT_PRIORITY_QUEUE {

	/** The inversion array. */
	protected int inv[];

	/** Creates a new empty heap without elements with a given capacity and comparator.
	 *
	 * @param refArray the reference array.
	 * @param capacity the initial capacity of this heap.
	 * @param c the comparator used in this heap, or <code>null</code> for the natural order.
	 */
	public HEAP_INDIRECT_PRIORITY_QUEUE( KEY_TYPE[] refArray, int capacity, KEY_COMPARATOR c ) {
		super( refArray, capacity, c );
		if ( capacity > 0 ) this.heap = new int[ capacity ];

		this.refArray = refArray;
		this.c = c;

		this.inv = new int[ refArray.length ];
		IntArrays.fill( inv, -1 );
	}

	/** Creates a new empty heap without elements and a given capacity.
	 *
	 * @param refArray the reference array.
	 * @param capacity the initial capacity of this heap.
	 */
	public HEAP_INDIRECT_PRIORITY_QUEUE( KEY_TYPE[] refArray, int capacity ) {
		this( refArray, capacity, null );
	}

	/** Creates a heap without elements, capacity equal to the length of the reference array, and a given comparator.
	 *
	 * @param refArray the reference array.
	 * @param c the comparator used in this heap, or <code>null</code> for the natural order.
	 */
	public HEAP_INDIRECT_PRIORITY_QUEUE( KEY_TYPE[] refArray, KEY_COMPARATOR c ) {
		this( refArray, refArray.length, c );
	}

	/** Creates a new heap and capacity equal to the length of the reference array. 
	 * @param refArray the reference array.
	 */
	public HEAP_INDIRECT_PRIORITY_QUEUE( KEY_TYPE[] refArray ) {
		this( refArray, refArray.length, null );
	}

	/** Ensures that the given index is nonnegative and belongs to the heap.
	 *
	 * @param index an index.
	 * @throws IndexOutOfBoundsException if the given index is negative.
	 * @throws IllegalArgumentException if the given index does not belong to the heap.
	 */
	protected void ensureHeapElement( final int index ) {
		if ( index < 0 )  throw new IndexOutOfBoundsException( "Index (" + index + ") is negative" );
		if ( index >= refArray.length ) throw new IndexOutOfBoundsException( "Index (" + index + ") is larger than reference array size (" + refArray.length + ")" );
		if ( inv[ index ] < 0 ) throw new IllegalArgumentException( "Index " + index + " does not belong to the queue" );
	}
	

	public void enqueue( int x ) {
		if ( size == heap.length ) heap = IntArrays.grow( heap, size + 1 );

		heap[ size ] = x;
		inv[ x ] = size++;

		INDIRECT_HEAPS.upHeap( refArray, heap, inv, size, size - 1, c );
	}

	public int dequeue() {
		ensureNonEmpty();

		final int result = heap[ 0 ];
		inv[ heap[ 0 ] ] = -1;
		inv[ heap[ 0 ] = heap[ --size ] ] = 0;
		INDIRECT_HEAPS.downHeap( refArray, heap, inv, size, 0, c );
		return result;
	}

	public void changed() {
		ensureNonEmpty();
		INDIRECT_HEAPS.downHeap( refArray, heap, inv, size, 0, c );
	}

	public void changed( int index ) {
		ensureHeapElement( index );
		final int newPos = INDIRECT_HEAPS.upHeap( refArray, heap, inv, size, index, c );
		INDIRECT_HEAPS.downHeap( refArray, heap, inv, size, newPos, c );
	}


	public void remove( int index ) {
		ensureHeapElement( index );

		final int result = heap[ index ];
		inv[ heap[ index ] ] = -1;
		inv[ heap[ index ] = heap[ --size ] ] = 0;
		final int newPos = INDIRECT_HEAPS.upHeap( refArray, heap, inv, size, index, c );
		INDIRECT_HEAPS.downHeap( refArray, heap, inv, size, newPos, c );
	}

}

// Local Variables:
// mode: jde
// tab-width: 4
// End:
