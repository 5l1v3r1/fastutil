/*		 
 * fastutil: Fast & compact type-specific collections for Java
 *
 * Copyright (C) 2002, 2003 Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package PACKAGE;

import java.util.*;

/** A type-specific {@link Collection}; provides some additional methods
 * that use polymorphism to reduce type juggling.
 *
 * <p>Note that iterators provided by classes implementing this interface
 * <em>must</em> be type specific.
 *
 * @see Collection
 */

public interface COLLECTION extends Collection {

	/** Returns a type-specific iterator on the collection.
	 *
	 * <P>The iterator returned by the {@link #iterator()} method and by this
	 * method are identical; however, using this method you can save a type casting.
	 *
	 * @see #iterator()
	 * @since 2.51
	 */
	KEY_ITERATOR KEY_ITERATOR_METHOD();

#if ! #keyclass(Object) && ! #keyclass(Reference)

	/**
	 * @see Collection#contains(Object)
	 */
	boolean contains( KEY_TYPE key );

	/** Returns a primitive type array containing the items of this collection. 
	 * @return a primitive type array containing the items of this collection.
	 * @see Collection#toArray()
	 */
	KEY_TYPE[] TO_KEY_ARRAY();

	/** Builds a primitive type array containing the items of this collection. 
	 * @param a if this array is big enough, it will be used to store the collection.
	 * @return a primitive type array containing the items of this collection.
	 * @see Collection#toArray(Object[])
	 */
	KEY_TYPE[] TO_KEY_ARRAY( KEY_TYPE a[] );

	/** Builds a primitive type array containing the items of this collection. 
	 * @param a if this array is big enough, it will be used to store the collection.
	 * @return a primitive type array containing the items of this collection.
	 * @see Collection#toArray(Object[])
	 */
	KEY_TYPE[] toArray( KEY_TYPE a[] );


	/**
	 * @see Collection#add(Object)
	 */
	boolean add( KEY_TYPE key );


#if #keyclass(Integer)
	/** Note that this method should be just called <code>remove()</code>, but the clash
	 * with the similarly named index-based method in the {@link java.util.List} interface
	 * forces us to use a distinguished name.
	 *
	 * @see Collection#remove(Object)
	 */
	boolean rem( KEY_TYPE key );
#else
	/**
	 * @see Collection#remove(Object)
	 */
	boolean remove( KEY_TYPE key );
#endif

	/**
	 * @see Collection#addAll(Collection)
	 */
	boolean addAll( COLLECTION c );

	/**
	 * @see Collection#containsAll(Collection)
	 */
	boolean containsAll( COLLECTION c );

	/**
	 * @see Collection#removeAll(Collection)
	 */
	boolean removeAll( COLLECTION c );

	/**
	 * @see Collection#retainAll(Collection)
	 */
	boolean retainAll( COLLECTION c );


#endif

}

// Local Variables:
// mode: jde
// tab-width: 4
// End:
