/*		 
 * fastutil: Fast & compact type-specific collections for Java
 *
 * Copyright (C) 2002, 2003 Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package it.unimi.dsi.fastutil;

import it.unimi.dsi.fastutil.booleans.*;
import it.unimi.dsi.fastutil.bytes.*;
import it.unimi.dsi.fastutil.shorts.*;
import it.unimi.dsi.fastutil.chars.*;
import it.unimi.dsi.fastutil.ints.*;
import it.unimi.dsi.fastutil.longs.*;
import it.unimi.dsi.fastutil.floats.*;
import it.unimi.dsi.fastutil.doubles.*;
import it.unimi.dsi.fastutil.objects.*;

import it.unimi.dsi.fastutil.Iterators;
import it.unimi.dsi.fastutil.Arrays;

import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.Map;
import java.util.SortedSet;
import java.util.SortedMap;
import java.util.NoSuchElementException;

/** A class providing static methods that do useful things with type-specific sorted maps.
 *
 * @see Collections
 */

public class Sortedmaps {

	private Sortedmaps() {}

	
#include "Byte2BooleanSortedmaps-Fragment.j"
#include "Byte2ByteSortedmaps-Fragment.j"
#include "Byte2ShortSortedmaps-Fragment.j"
#include "Byte2IntSortedmaps-Fragment.j"
#include "Byte2LongSortedmaps-Fragment.j"
#include "Byte2CharSortedmaps-Fragment.j"
#include "Byte2FloatSortedmaps-Fragment.j"
#include "Byte2DoubleSortedmaps-Fragment.j"
#include "Byte2ObjectSortedmaps-Fragment.j"
#include "Byte2ReferenceSortedmaps-Fragment.j"
#include "Short2BooleanSortedmaps-Fragment.j"
#include "Short2ByteSortedmaps-Fragment.j"
#include "Short2ShortSortedmaps-Fragment.j"
#include "Short2IntSortedmaps-Fragment.j"
#include "Short2LongSortedmaps-Fragment.j"
#include "Short2CharSortedmaps-Fragment.j"
#include "Short2FloatSortedmaps-Fragment.j"
#include "Short2DoubleSortedmaps-Fragment.j"
#include "Short2ObjectSortedmaps-Fragment.j"
#include "Short2ReferenceSortedmaps-Fragment.j"
#include "Int2BooleanSortedmaps-Fragment.j"
#include "Int2ByteSortedmaps-Fragment.j"
#include "Int2ShortSortedmaps-Fragment.j"
#include "Int2IntSortedmaps-Fragment.j"
#include "Int2LongSortedmaps-Fragment.j"
#include "Int2CharSortedmaps-Fragment.j"
#include "Int2FloatSortedmaps-Fragment.j"
#include "Int2DoubleSortedmaps-Fragment.j"
#include "Int2ObjectSortedmaps-Fragment.j"
#include "Int2ReferenceSortedmaps-Fragment.j"
#include "Long2BooleanSortedmaps-Fragment.j"
#include "Long2ByteSortedmaps-Fragment.j"
#include "Long2ShortSortedmaps-Fragment.j"
#include "Long2IntSortedmaps-Fragment.j"
#include "Long2LongSortedmaps-Fragment.j"
#include "Long2CharSortedmaps-Fragment.j"
#include "Long2FloatSortedmaps-Fragment.j"
#include "Long2DoubleSortedmaps-Fragment.j"
#include "Long2ObjectSortedmaps-Fragment.j"
#include "Long2ReferenceSortedmaps-Fragment.j"
#include "Char2BooleanSortedmaps-Fragment.j"
#include "Char2ByteSortedmaps-Fragment.j"
#include "Char2ShortSortedmaps-Fragment.j"
#include "Char2IntSortedmaps-Fragment.j"
#include "Char2LongSortedmaps-Fragment.j"
#include "Char2CharSortedmaps-Fragment.j"
#include "Char2FloatSortedmaps-Fragment.j"
#include "Char2DoubleSortedmaps-Fragment.j"
#include "Char2ObjectSortedmaps-Fragment.j"
#include "Char2ReferenceSortedmaps-Fragment.j"
#include "Float2BooleanSortedmaps-Fragment.j"
#include "Float2ByteSortedmaps-Fragment.j"
#include "Float2ShortSortedmaps-Fragment.j"
#include "Float2IntSortedmaps-Fragment.j"
#include "Float2LongSortedmaps-Fragment.j"
#include "Float2CharSortedmaps-Fragment.j"
#include "Float2FloatSortedmaps-Fragment.j"
#include "Float2DoubleSortedmaps-Fragment.j"
#include "Float2ObjectSortedmaps-Fragment.j"
#include "Float2ReferenceSortedmaps-Fragment.j"
#include "Double2BooleanSortedmaps-Fragment.j"
#include "Double2ByteSortedmaps-Fragment.j"
#include "Double2ShortSortedmaps-Fragment.j"
#include "Double2IntSortedmaps-Fragment.j"
#include "Double2LongSortedmaps-Fragment.j"
#include "Double2CharSortedmaps-Fragment.j"
#include "Double2FloatSortedmaps-Fragment.j"
#include "Double2DoubleSortedmaps-Fragment.j"
#include "Double2ObjectSortedmaps-Fragment.j"
#include "Double2ReferenceSortedmaps-Fragment.j"
#include "Object2BooleanSortedmaps-Fragment.j"
#include "Object2ByteSortedmaps-Fragment.j"
#include "Object2ShortSortedmaps-Fragment.j"
#include "Object2IntSortedmaps-Fragment.j"
#include "Object2LongSortedmaps-Fragment.j"
#include "Object2CharSortedmaps-Fragment.j"
#include "Object2FloatSortedmaps-Fragment.j"
#include "Object2DoubleSortedmaps-Fragment.j"
#include "Object2ObjectSortedmaps-Fragment.j"
#include "Object2ReferenceSortedmaps-Fragment.j"
#include "Reference2BooleanSortedmaps-Fragment.j"
#include "Reference2ByteSortedmaps-Fragment.j"
#include "Reference2ShortSortedmaps-Fragment.j"
#include "Reference2IntSortedmaps-Fragment.j"
#include "Reference2LongSortedmaps-Fragment.j"
#include "Reference2CharSortedmaps-Fragment.j"
#include "Reference2FloatSortedmaps-Fragment.j"
#include "Reference2DoubleSortedmaps-Fragment.j"
#include "Reference2ObjectSortedmaps-Fragment.j"
#include "Reference2ReferenceSortedmaps-Fragment.j"

#ifdef TEST
	
	private static long seed = System.currentTimeMillis(); 
	private static java.util.Random r = new java.util.Random( seed );

	private static java.text.NumberFormat format = new java.text.DecimalFormat( "#,###.00" );
	private static java.text.FieldPosition fp = new java.text.FieldPosition( 0 );

	private static String format( double d ) {
		StringBuffer s = new StringBuffer();
		return format.format( d, s, fp ).toString();
	}

	private static void fatal( String msg ) {
		System.out.println( msg );
		System.exit( 1 );
	}

	private static void ensure( boolean cond, String msg ) {
		if ( cond ) return;
		fatal( msg );
	}

	/** This method expects as first argument a lower-cased type (e.g., "int"),
	 * and as second optional argument a seed. */

	public static void main( String arg[] ) throws Exception {
		if ( arg.length > 1 ) r = new java.util.Random( seed = Long.parseLong( arg[ 1 ] ) );
		  
		try {
			Sortedmaps.class.getDeclaredMethod( "test" + arg[ 0 ], new Class[] {} ).invoke( Sortedmaps.class, new Object[] {} ); 
		} catch( AssertionError e ) {
			System.err.println( e );
			System.err.println( "seed: " + seed );
		}
	}
	
#endif
	
}

// Local Variables:
// mode: jde
// tab-width: 4
// End:
