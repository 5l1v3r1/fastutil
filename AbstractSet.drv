/*		 
 * fastUtil 1.12: Fast & compact specialized hash-based utility classes for Java
 *
 * Copyright (C) 2002 Sebastiano Vigna 
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2, or (at your option) any
 * later version.
 *	
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *	
 * You should have received a copy of the GNU General Public License along
 * with this program; see the file COPYING.  If not, write to the Free
 * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 * 02111-1307, USA.
 *
 */

package it.unimi.dsi.fastUtil;

import java.util.*;
import java.util.AbstractSet; // workaround to force @see/@link

/** A class inheriting methods from {@link AbstractSet} but
 * implementing a type-specific interface.
 *
 * @see AbstractSet
 */

public abstract class ABSTRACT_SET extends AbstractSet implements SET {
	 
	 /* This code is a dup of that for collections due to the lack of multiple
	 inheritance. */

#if !#keyclass(Object)

	 /** Adds all elements of the given collection to the set.
	  * If the collection implements the interface of this set,
	  * it uses the faster iterators.
	  *
	  * @param c a collection.
	  */

	 public boolean addAll(Collection c) {
		  if (c instanceof SET) {
				boolean retVal = false;
				for(KEY_ITERATOR i = (KEY_ITERATOR)c.iterator(); i.hasNext(); ) if (add(i.NEXT_KEY())) retVal = true;
				return retVal;
		  }
		  else return super.addAll(c);
	 }


	 /** Checks whether the set contains all elements from the given collection.
	  * If the collection implements the interface of this set,
	  * it uses the faster iterators.
	  *
	  * @param c a collection.
	  */

	 public boolean containsAll(Collection c) {
		  if (c instanceof SET) {
				for(KEY_ITERATOR i = (KEY_ITERATOR)c.iterator(); i.hasNext(); ) if (!contains(i.NEXT_KEY())) return false;
				return true;
		  }
		  else return super.containsAll(c);
	 }


	 public KEY_TYPE[] toArray(KEY_TYPE a[]) {
		  return TO_KEY_ARRAY(a);
	 }
#endif


    public KEY_TYPE[] TO_KEY_ARRAY() {
		  return TO_KEY_ARRAY(null);
	 }
	 
    public KEY_TYPE[] TO_KEY_ARRAY( KEY_TYPE a[] ) {
		  final KEY_TYPE result[];
		  final KEY_ITERATOR i;
		  int j;

		  if (a == null || a.length < size()) result = new KEY_TYPE[size()];
		  else result = a;

		  j = 0;
		  i = (KEY_ITERATOR)iterator();

		  while(i.hasNext()) a[j++] = i.NEXT_KEY();

		  return result;
    }
}

// Local Variables:
// mode: java
// End:
