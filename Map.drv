package it.unimi.dsi.fastMaps;

import java.util.*;

/**
 * An object that maps fixed type keys to values, providing some additional methods
 * that uses polymorphism to reduce "type juggling".
 *
 * @author  Sebastiano Vigna
 * @version 1.0, 24/03/01
 * @see Map
 */

public interface MAP_NAME extends Map {
    // Query Operations


#if ! #keyclass(Object)

    /**
     * @see Map#containsKey(Object)
     */

    boolean containsKey(KEY_TYPE key);

#endif	 


#if ! #valueclass(Object)

    /**
     * @see Map#containsValue(Object)
	  */

    boolean containsValue(VALUE_TYPE value);

#endif


#if ! #keyclass(Object)

    /**
     * @see Map#get(Object)
     */

    VALUE_TYPE get(KEY_TYPE key);

#elif ! #valueclass(Object)

    /**
     * @see Map#get(Object)
     */

    VALUE_TYPE GET_VALUE_TYPE_CAP (Object key);

#endif



    // Modification Operations

#if ! #keyclass(Object) || ! #valueclass(Object)

    /**
     * @see Map#put(Object,Object)
     */

    VALUE_TYPE put(KEY_TYPE key, VALUE_TYPE value);

#endif



#if !#keyclass(Object)

    /**
     * @see Map#remove(Object)
     */
    VALUE_TYPE remove(KEY_TYPE key);

#elif ! #valueclass(Object)

    /**
     * @see Map#remove(Object)
     */
    VALUE_TYPE REMOVE_VALUE_TYPE_CAP(Object key);

#endif


#if ! #valueclass(Object)

    /**
     * Sets the default return value. This value is returned 
	  * by <code>get()</code>, <code>put()</code> and <code>remove()</code> to denote
	  * that the map does not contain the specified key.
     *
     * @param rv the new default return value.
     */

	 void setDefRetValue( VALUE_TYPE rv );

	 
    /**
     * Gets the default return value.
     *
     * @return the current default return value.
     */

	 VALUE_TYPE getDefRetValue();

#endif

	 
    /**
     * @see Map.Entry
     */

    interface ENTRY_NAME extends java.util.Map.Entry {
		  
#if ! #valueclass(Object)
		  /**
			* @see Map.Entry#setValue(Object)
			*/
		  VALUE_TYPE setValue(VALUE_TYPE value);
#endif

    }

}
