/*		 
 * fastUtil 2.20: Fast & compact specialized utility classes for Java
 *
 * Copyright (C) 2002, 2003 Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package it.unimi.dsi.fastUtil;

import java.util.*;
import java.util.Map; // workaround to force @see/@link
import java.util.Map.Entry; // workaround to force @see/@link

/** A type-specific {@link Map}; provides some additional methods that use polymorphism to reduce type juggling.
 *
 * @see Map
 */

public interface MAP extends Map {

#if ! #keyclass(Object) && ! #keyclass(Reference)

	/**
	 * @see Map#containsKey(Object)
	 */

	boolean containsKey(KEY_TYPE key);

#endif	 


#if ! #valueclass(Object) && ! #valueclass(Reference)

	/**
	 * @see Map#containsValue(Object)
	 */

	boolean containsValue(VALUE_TYPE value);

#endif


#if ! #keyclass(Object) && ! #keyclass(Reference)

	/** Returns the value to which the given key is mapped.
	 *
	 * @param key the key.
	 * @return the corresponding value, or the default return value if no value was present for the given key.
	 * @see Map#get(Object)
	 */

	VALUE_TYPE get(KEY_TYPE key);

#elif ! #valueclass(Object) && ! #valueclass(Reference)

	/** Returns the value to which the given key is mapped.
	 *
	 * @param key the key.
	 * @return the corresponding value, or the default return value if no value was present for the given key.
	 * @see Map#get(Object)
	 */

	VALUE_TYPE GET_VALUE (Object key);

#endif


#if ! #keyclass(Object) && ! #keyclass(Reference) || ! #valueclass(Object) && ! #valueclass(Reference)

	/** Adds a pair to the map.
	 *
	 * @param key the key.
	 * @param value the value.
	 * @return the old value, or the default return value if no value was present for the given key.
	 * @see Map#put(Object,Object)
	 */

	VALUE_TYPE put(KEY_TYPE key, VALUE_TYPE value);

#endif



#if !#keyclass(Object) && !#keyclass(Reference)

	/** Removes the mapping with the given key.
	 * @param key
	 * @return the old value, or the default return value if no value was present for the given key.
	 * @see Map#remove(Object)
	 */
	VALUE_TYPE remove(KEY_TYPE key);

#elif ! #valueclass(Object) && ! #valueclass(Reference)

	/** Removes the mapping with the given key.
	 * @param key
	 * @return the old value, or the default return value if no value was present for the given key.
	 * @see Map#remove(Object)
	 */
	VALUE_TYPE REMOVE_VALUE(Object key);

#endif

	/**
	 * Sets the default return value. This value is returned 
	 * by <code>get()</code>, <code>put()</code> and <code>remove()</code> to denote
	 * that the map does not contain the specified key. It is 0/<code>false</code>/<code>null</code>
	 * by default.
	 *
	 * @param rv the new default return value.
	 * @see #getDefRetValue()
	 * @see #defaultReturnValue()
	 * @deprecated As of <code>fastUtil</code> 2.0, replaced by <code>defaultReturnValue()</code>.
	 */

	void setDefRetValue( VALUE_TYPE rv );

	 
	/**
	 * Gets the default return value.
	 *
	 * @return the current default return value.
	 * @see #defaultReturnValue()
	 * @deprecated As of <code>fastUtil</code> 2.0, replaced by {@link #defaultReturnValue()}.
	 */

	VALUE_TYPE getDefRetValue();

	 
	/*** Sets the default return value. 
	 *
	 * This value is returned by <code>get()</code>, <code>put()</code> and
	 * <code>remove()</code> to denote that the map does not contain the
	 * specified key. It is 0/<code>false</code>/<code>null</code> by default.
	 *
	 * @param rv the new default return value.
	 * @see #defaultReturnValue()
	 */

	void defaultReturnValue( VALUE_TYPE rv );

	 
	/** Gets the default return value.
	 *
	 * @return the current default return value.
	 */

	VALUE_TYPE defaultReturnValue();

	 
	/** A type-specific {@link java.util.Map.Entry}; provides some additional methods
	 * to access its content reducing type juggling.
	 *
	 * @see java.util.Map.Entry
	 */

	interface Entry extends java.util.Map.Entry {
		  
#if ! #valueclass(Object) && ! #valueclass(Reference)
		/**
		 * @see java.util.Map.Entry#setValue(Object)
		 */
		VALUE_TYPE setValue(VALUE_TYPE value);

		/**
		 * @see java.util.Map.Entry#getValue()
		 */
		VALUE_TYPE ENTRY_GET_VALUE();
#endif

#if ! #keyclass(Object) && !#keyclass(Reference)
		/**
		 * @see java.util.Map.Entry#getKey()
		 */
		KEY_TYPE ENTRY_GET_KEY();
#endif

	}

}

// Local Variables:
// mode: jde
// tab-width: 4
// End:
