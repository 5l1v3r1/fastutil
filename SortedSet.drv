/*		 
 * fastutil 2.61: Fast & compact specialized utility classes for Java
 *
 * Copyright (C) 2002, 2003 Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package PACKAGE;

import java.util.*;
import java.util.SortedSet;

/** A type-specific {@link SortedSet}; provides some additional methods that use polymorphism to reduce type juggling.
 *
 * @see SortedSet
 */


public interface SORTEDSET extends SET, SortedSet {

	/** Returns a type-specific {@link BidirectionalIterator} on the elements in
	 * this set, starting from a given element of the domain (optional operation).
	 *
	 * <P>This method returns a type-specific bidirectional iterator with given
	 * starting point. The starting point is any element comparable to the
	 * elements of this set (even if it does not actually belong to the
	 * set). The next element of the returned iterator is the least element of
	 * the set that is greater than the starting point (if there are no
	 * elements greater than the starting point, {@link
	 * BidirectionalIterator#hasNext() hasNext()} will return
	 * <code>false</code>). The previous element of the returned iterator is
	 * the greatest element of the set that is smaller than or equal to the
	 * starting point (if there are no elements smaller than or equal to the
	 * starting point, {@link BidirectionalIterator#hasPrevious()
	 * hasPrevious()} will return <code>false</code>).
	 *  
	 * <P>Note that passing the last element of the set as starting point and
	 * calling {@link BidirectionalIterator#previous() previous()} you can traverse the
	 * entire set in reverse order.
	 *
	 * @param fromElement an element to start from.
	 * @return a bidirectional iterator iterator starting at the given element.
	 * @throws UnsupportedOperationException if this set does not support iterators with a starting point.
	 */

	KEY_BIDI_ITERATOR iterator( KEY_TYPE fromElement );


#if ! #keyclass(Object) && ! #keyclass(Reference)

	/**
	 * @see SortedSet#subSet(Object,Object)
	 */
	SORTEDSET subSet( KEY_TYPE fromElement, KEY_TYPE toElement) ;

	/**
	 * @see SortedSet#headSet(Object)
	 */
	SORTEDSET headSet( KEY_TYPE toElement );

	/**
	 * @see SortedSet#tailSet(Object)
	 */
	SORTEDSET tailSet( KEY_TYPE fromElement );

	/**
	 * @see SortedSet#first()
	 */
	KEY_TYPE FIRST();

	/**
	 * @see SortedSet#last()
	 */
	KEY_TYPE LAST();

#endif 

}


// Local Variables:
// mode: jde
// tab-width: 4
// End:
