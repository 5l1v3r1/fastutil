/* 
 * fastutil: Fast & compact type-specific collections for Java
 *
 * Copyright (C) 2002, 2003 Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package PACKAGE;

import it.unimi.dsi.fastutil.HashCommon;
import it.unimi.dsi.fastutil.Iterators;
import it.unimi.dsi.fastutil.Stack;

import java.util.List;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.Collection;
import java.util.NoSuchElementException;

/**  An abstract class providing basic methods for lists implementing a type-specific list interface.
 *
 * <P>As an additional bonus, this class implements on top of the list operations a type-specific stack.
 */

public abstract class ABSTRACT_LIST extends ABSTRACT_COLLECTION implements LIST, STACK {

	private static final boolean asserts = ASSERTS;

	protected ABSTRACT_LIST() {}
	
	/** Ensures that the given index is nonnegative and not greater than the list size.
	 *
	 * @param index an index.
	 * @throw IndexOutOfBoundsException if the given index is negative or greater than the list size.
	 */
	protected void ensureIndex( final int index ) {
		if ( index < 0 )  throw new IndexOutOfBoundsException( "Index (" + index + ") is negative" );
		if ( index > size() )  throw new IndexOutOfBoundsException( "Index (" + index + ") is greater than or equal to list size (" + ( size() ) + ")" );
	}
	
	/** Ensures that the given index is nonnegative and smaller than the list size.
	 *
	 * @param index an index.
	 * @throw IndexOutOfBoundsException if the given index is negative or not smaller than the list size.
	 */
	protected void ensureRestrictedIndex( final int index ) {
		if ( index < 0 )  throw new IndexOutOfBoundsException( "Index (" + index + ") is negative" );
		if ( index >= size() )  throw new IndexOutOfBoundsException( "Index (" + index + ") is greater than list size (" + ( size() ) + ")" );
	}

	public void add( final int index, final KEY_TYPE k ) {
		throw new UnsupportedOperationException();
	}

	public KEY_TYPE set( final int index, final KEY_TYPE k ) {
		throw new UnsupportedOperationException();
	}

	public boolean addAll( int index, final Collection c ) {
		ensureIndex( index );
		int n = c.size();
		if ( n == 0 ) return false;
		Iterator i = c.iterator();
		while( n-- != 0 ) add( index++, i.next() );
		return true;
	}

	/** Delegates to a more generic method. */
	public boolean addAll( final int index, COLLECTION c ) {
		return addAll( index, (Collection)c );
	}

	/** Delegates to a more generic method. */
	public boolean addAll( final int index, LIST l ) {
		return addAll( index, (COLLECTION)l );
	}

	/** Delegates to a more generic method. */
	public boolean addAll( final Collection c ) {
		return addAll( size(), c );
	}

	/** Delegates to a more generic method. */
	public boolean addAll( final COLLECTION c ) {
		return addAll( size(), c );
	}

	/** Delegates to a more generic method. */
	public boolean addAll( final LIST l ) {
		return addAll( size(), l );
	}

	/** Delegates to the corresponding type-specific method. */
	public ListIterator listIterator() {
		return KEY_LIST_ITERATOR_METHOD();
	}

	/** Delegates to the corresponding type-specific method. */
	public ListIterator listIterator( final int index ) {
		return KEY_LIST_ITERATOR_METHOD( index );
	}

	/** Delegates to the corresponding list-iterator method. */
	public KEY_ITERATOR KEY_ITERATOR_METHOD() {
		return KEY_LIST_ITERATOR_METHOD();
	}

	/** Delegates to the corresponding list-iterator method. */
	public KEY_LIST_ITERATOR KEY_LIST_ITERATOR_METHOD() {
		return KEY_LIST_ITERATOR_METHOD( 0 );
	}

	public boolean contains( final KEY_TYPE k ) {
		return indexOf( k ) >= 0;
	}

	public int indexOf( final KEY_TYPE k ) {
#if #keyclass(Object)
		int h = KEY2INT( k );
#endif
		final KEY_LIST_ITERATOR i = KEY_LIST_ITERATOR_METHOD();
		KEY_TYPE e;
		while( i.hasNext() ) {
			e = i.NEXT_KEY();
			if ( KEY_EQUAL_HASH( k, h, e ) ) return i.previousIndex(); 
		}
		return -1;
	}

	public int lastIndexOf( final KEY_TYPE k ) {
#if #keyclass(Object)
		int h = KEY2INT( k );
#endif
		KEY_LIST_ITERATOR i = KEY_LIST_ITERATOR_METHOD( size() );
		KEY_TYPE e;
		while( i.hasPrevious() ) {
			e = i.PREV_KEY();
			if ( KEY_EQUAL_HASH( k, h, e ) ) return i.nextIndex(); 
		}
		return -1;
	}

	public void size( final int size ) {
		int i = size();
		if ( size > i ) while( i++ < size ) add( KEY_NULL );
		else while( i-- != size ) remove( i );
	}		


	public LIST SUBLIST_METHOD( final int from, final int to ) {
		ensureIndex( from );
		ensureIndex( to );
		if ( from > to ) throw new IndexOutOfBoundsException( "Start index (" + from + ") is greater than end index (" + to + ")" );
		
		return new SUBLIST( this, from, to );
	}
	
	/** Delegates to the corresponding type-specific method. */
	public List subList( final int from, final int to ) {
		return SUBLIST_METHOD( from, to );
	}

	/** Removes elements of this type-specific list one-by-one. 
	 *
	 * <P>This is a trivial iterator-based implementation. It is expected that
	 * implementations will override this method with a more optimised version.
	 *
	 *
	 * @param from the start index (inclusive).
	 * @param to the end index (exclusive).
	 */
	
	public void removeElements( final int from, final int to ) {
		ensureIndex( to );
		KEY_LIST_ITERATOR i = KEY_LIST_ITERATOR_METHOD( from );
		int n = to - from;
		if ( n < 0 ) throw new IllegalArgumentException( "Start index (" + from + ") is greater than end index (" + to + ")" );
		while( n-- != 0 ) {
			i.NEXT_KEY();
			i.remove();
		}
	}

	/** Copies element of this type-specific list into the given array one-by-one.
	 *
	 * <P>This is a trivial iterator-based implementation. It is expected that
	 * implementations will override this method with a more optimised version.
	 *
	 * @param from the start index (inclusive).
	 * @param a the destination array.
	 * @param offset the offset into the destination array where to store the first element copied.
	 * @param length the number of elements to be copied.
	 */
	 
	public void getElements( final int from, final KEY_TYPE a[], int offset, int length ) {
		KEY_LIST_ITERATOR i = KEY_LIST_ITERATOR_METHOD( from );
		if ( offset < 0 ) throw new ArrayIndexOutOfBoundsException( "Start index (" + offset + ") is negative" );
		if ( offset + length > a.length ) throw new ArrayIndexOutOfBoundsException( "End index (" + ( offset + length ) + ") is greater than array length (" + a.length + ")" );
		if ( from + length > size() ) throw new IndexOutOfBoundsException( "End index (" + ( from + length ) + ") is greater than list size (" + size() + ")" );
		while( length-- != 0 ) a[ offset++ ] = i.NEXT_KEY();
	}


	private boolean valEquals( final Object a, final Object b ) {
		return a == null ? b == null : a.equals( b );
	}

	public boolean equals( final Object o ) {
		if ( o == this ) return true;
		if ( ! ( o instanceof List ) ) return false;
		final List l = (List)o;
		int s = size();
		if ( s != l.size() ) return false;

		final ListIterator i1 = listIterator(), i2 = l.listIterator();

#if #keyclass(Reference)
		while( s-- !=  0 ) if ( i1.next() != i2.next() ) return false;
#else
		while( s-- !=  0 ) if ( ! valEquals( i1.next(), i2.next() ) ) return false;
#endif
		return true;
	}

#if ! #keyclass(Reference) && ! #keyclass(Boolean)
    /** Compares this list to another object. If the
     * argument is a {@link java.util.List}, this method performs a lexicographical comparison; otherwise,
     * it throws a <code>ClassCastException</code>.
     *
     * @param o an object.
     * @return if the argument is a {@link java.util.List}, a negative integer,
     * zero, or a positive integer as this list is lexicographically less than, equal
     * to, or greater than the argument.
     * @throws ClassCastException if the argument is not a list.
     */

	public int compareTo( final Object o ) {
		if ( o == this ) return 0;
		if ( o instanceof LIST ) {
			final LIST l = (LIST)o;
			
			final KEY_LIST_ITERATOR i1 = KEY_LIST_ITERATOR_METHOD(), i2 = ((LIST)l).KEY_LIST_ITERATOR_METHOD();
			int r;
			KEY_TYPE e1, e2;
			
			while( i1.hasNext() && i2.hasNext() ) {
				e1 = i1.NEXT_KEY();
				e2 = i2.NEXT_KEY();
				if ( ( r = KEY_CMP( e1, e2 ) ) != 0 ) return r;
			}
			return i2.hasNext() ? -1 : ( i1.hasNext() ? 1 : 0 );
		}
		
		List l = (List)o;
		
		ListIterator i1 = listIterator(), i2 = ((List)l).listIterator();
		int r;

		while( i1.hasNext() && i2.hasNext() ) 
			if ( ( r = ((Comparable)i1.next()).compareTo( i2.next() ) ) != 0 ) return r;
		return i2.hasNext() ? -1 : ( i1.hasNext() ? 1 : 0 );
	}
#endif

	/** Returns the hash code for this list, which is identical to {@link java.util.List#hashCode()}.
	 *
	 * @return the hash code for this list.
	 */
	public int hashCode() {
		KEY_ITERATOR i = KEY_ITERATOR_METHOD();
		int h = 1, s = size();
		while ( s-- != 0 ) {
			KEY_TYPE k = i.NEXT_KEY(); 
			h = 31 * h + KEY2INT( k );
		}
		return h;
	}

	
	public void push( KEY_TYPE o ) {
		add( o ); 
	}

	public KEY_TYPE POP() {
		if ( isEmpty() ) throw new NoSuchElementException();
		return REMOVE_KEY( size() - 1 );
	}

	public KEY_TYPE TOP() {
		if ( isEmpty() ) throw new NoSuchElementException();
		return GET_KEY( size() - 1 );
	}

	public KEY_TYPE PEEK( int i ) {
		return GET_KEY( size() - 1 - i );
	}

#if ! #keyclass(Object) && ! #keyclass(Reference)

	/** Delegates to the corresponding type-specific method. */
	public void add( final int index, final Object ok) {
		add( index, KEY2TYPE( ok) );
	}

	/** Delegates to the corresponding type-specific method. */
	public Object set( final int index, final Object ok) {
		return KEY2OBJ( set( index, KEY2TYPE( ok) ) );
	}

	/** Delegates to the corresponding type-specific method. */
	public Object get( final int index ) {
		return KEY2OBJ( GET_KEY( index ) );
	}

	/** Delegates to the corresponding type-specific method. */
	public int indexOf( final Object ok) {
		return indexOf( KEY2TYPE( ok) );
	}

	/** Delegates to the corresponding type-specific method. */
	public int lastIndexOf( final Object ok ) {
		return lastIndexOf( KEY2TYPE( ok) );
	}

	/** Delegates to the corresponding type-specific method. */
	public Object remove( final int index ) {
		return KEY2OBJ( REMOVE_KEY( index ) );
	}

	/** Delegates to the corresponding type-specific method. */
	public void push( Object o ) {
		push( KEY2TYPE( o ) ); 
	}

	/** Delegates to the corresponding type-specific method. */
	public Object pop() {
		return KEY2OBJ( POP() ); 
	}

	/** Delegates to the corresponding type-specific method. */
	public Object top() {
		return KEY2OBJ( TOP() ); 
	}

	/** Delegates to the corresponding type-specific method. */
	public Object peek( int i ) {
		return KEY2OBJ( PEEK( i ) ); 
	}

#else


#endif


	public String toString() {
		final StringBuffer s = new StringBuffer();
		final KEY_ITERATOR i = KEY_ITERATOR_METHOD();
		int n = size();
		KEY_TYPE k;
		boolean first = true;

		s.append("[");

		while( n-- != 0 ) {
			if (first) first = false;
			else s.append(", ");
			k = i.NEXT_KEY();
#if #keyclass(Object) || #keyclass(Reference)
			if (this == k) s.append("(this list)"); else
#endif
				s.append( String.valueOf( k ) );
		}

		s.append("]");
		return s.toString();
	}

}


class SUBLIST extends ABSTRACT_LIST implements java.io.Serializable {
	private final LIST l; // The list this sublist restricts.
	private final int from; // Initial (inclusive) index of this sublist.
	private int to; //  Final (exclusive) index of this sublist.

	private static final boolean asserts = ASSERTS;
	
	public SUBLIST( final LIST l, final int from, final int to ) {
		this.l = l;
		this.from = from;
		this.to = to;
	}

	private void assertRange() {
		if ( asserts ) {
			assert from <= l.size();
			assert to <= l.size();
			assert to >= from;
		}
	}

	public boolean add( final KEY_TYPE k ) {
		l.add( to, k );
		to++;
		if ( asserts ) assertRange();
		return true;
	}

	public void add( final int index, final KEY_TYPE k ) {
		ensureIndex( index );
		l.add( from + index, k );
		to++;
		if ( asserts ) assertRange();
	}

	public boolean addAll( final int index, final Collection c ) {
		ensureIndex( index );
		to += c.size();
		if ( asserts ) {
			boolean retVal = l.addAll( from + index, c );
			assertRange();
			return retVal;
		}
		else return l.addAll( from + index, c );
	}

	public boolean addAll( final int index, final COLLECTION c ) {
		ensureIndex( index );
		to += c.size();
		if ( asserts ) {
			boolean retVal = l.addAll( from + index, c );
			assertRange();
			return retVal;
		}
		else return l.addAll( from + index, c );
	}

	public boolean addAll( final int index, final LIST l ) {
		ensureIndex( index );
		to += l.size();
		if ( asserts ) {
			boolean retVal = this.l.addAll( from + index, l );
			assertRange();
			return retVal;
		}
		else return this.l.addAll( from + index, l );
	}

	public KEY_TYPE GET_KEY( int index ) {
		ensureRestrictedIndex( index );
		return l.GET_KEY( from + index );
	}

	public KEY_TYPE REMOVE_KEY( int index ) {
		ensureRestrictedIndex( index );
		to--;
		return l.REMOVE_KEY( from + index );
	}

	public boolean REMOVE( KEY_TYPE k ) {
		int index = indexOf( k );
		if ( index == -1 ) return false;
		to--;
		l.REMOVE_KEY( from + index );
		if ( asserts ) assertRange();
		return true;
	}

	public KEY_TYPE set( int index, KEY_TYPE k ) {
		ensureRestrictedIndex( index );
		return l.set( from + index, k );
	}

	public void clear() {
		removeElements( 0, size() );
		if ( asserts ) assertRange();
	}

	public int size() { 
		return to - from; 
	}

		
	public void getElements( final int from, final KEY_TYPE[] a, final int offset, final int length ) {
		ensureIndex( from );
		if ( from + length > size() )  throw new IndexOutOfBoundsException( "End index (" + from + length + ") is greater than list size (" + size() + ")" );
		l.getElements( this.from + from, a, offset, length );
	}

	public void removeElements( final int from, final int to ) {
		ensureIndex( from );
		ensureIndex( to );
		l.removeElements( this.from + from, this.from + to );
		this.to -= ( to - from );
		if ( asserts ) assertRange();
	}

	public KEY_LIST_ITERATOR KEY_LIST_ITERATOR_METHOD( final int index ) {
		ensureIndex( index );

		return new KEY_ABSTRACT_LIST_ITERATOR() {
				int pos = index, last = -1;
							
				public boolean hasNext() { return pos < size(); }
				public boolean hasPrevious() { return pos > 0; }
				public KEY_TYPE NEXT_KEY() { if ( ! hasNext() ) throw new NoSuchElementException(); return l.GET_KEY( from + ( last = pos++ ) ); }
				public KEY_TYPE PREV_KEY() { if ( ! hasPrevious() ) throw new NoSuchElementException(); return l.GET_KEY( from + ( last = --pos ) ); }
				public int nextIndex() { return pos; }
				public int previousIndex() { return pos - 1; }
				public void add( KEY_TYPE k ) { 
					if ( last == -1 ) throw new IllegalStateException();
					SUBLIST.this.add( pos++, k ); 
					last = -1;
					if ( asserts ) assertRange();
				}
				public void set( KEY_TYPE k ) { 
					if ( last == -1 ) throw new IllegalStateException();
					SUBLIST.this.set( last, k ); 
				}
				public void remove() { 
					if ( last == -1 ) throw new IllegalStateException();
					SUBLIST.this.REMOVE_KEY( last );
					/* If the last operation was a next(), we are removing an element *before* us, and we must decrease pos correspondingly. */
					if ( last < pos ) pos--;
					last = -1;
					if ( asserts ) assertRange();
				}
			};
	}

	public LIST SUBLIST_METHOD( final int from, final int to ) {
		ensureIndex( from );
		ensureIndex( to );
		if ( from > to ) throw new IllegalArgumentException( "Start index (" + from + ") is greater than end index (" + to + ")" );
			
		return new SUBLIST( this, from, to );
	}

}



// Local Variables:
// mode: jde
// tab-width: 4
// End:
