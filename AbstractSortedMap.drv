/*		 
 * fastutil: Fast & compact type-specific collections for Java
 *
 * Copyright (C) 2002, 2003, 2004, 2005 Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package PACKAGE;

import it.unimi.dsi.fastutil.BidirectionalIterator;
import java.util.Set;
import java.util.Comparator;
import java.util.SortedMap;
import java.util.SortedSet;

/** An abstract class providing basic methods for sorted maps implementing a type-specific interface.
 *
 */

public abstract class ABSTRACT_SORTED_MAP extends ABSTRACT_MAP implements SORTED_MAP {

	protected ABSTRACT_SORTED_MAP() {}

	/** Delegates to the corresponding type-specific method. */
	public SortedMap headMap( Object to  ) {
		return headMap( KEY2TYPE( to ) );
	}

	/** Delegates to the corresponding type-specific method. */
	public SortedMap tailMap( Object from ) {
		return tailMap( KEY2TYPE( from ) );
	}

	/** Delegates to the corresponding type-specific method. */
	public SortedMap subMap( Object from, Object to ) {
		return subMap( KEY2TYPE( from ), KEY2TYPE( to ) );
	}

	/** Delegates to the corresponding type-specific method. */
	public Object firstKey() {
		return KEY2OBJ( FIRST_KEY() );
	}
	 
	/** Delegates to the corresponding type-specific method. */
	public Object lastKey() {
		return KEY2OBJ( LAST_KEY() );
	}



	/** Returns a type-specific-sorted-set view of the keys of this map.
	 *
	 * <P>The view is backed by the sorted set returned by {@link #entrySet()}. Note that
	 * <em>no attempt is made at caching the result of this method</em>, as this would
	 * require adding some attributes that lightweight implementations would
	 * not need. Subclasses may easily override this policy by calling
	 * this method and caching the result, but implementors are encouraged to
	 * write more efficient ad-hoc implementations.
	 *
	 * @return a sorted set view of the keys of this map; it may be safely cast to a type-specific interface.
	 */


	public Set keySet() {
		return new ABSTRACT_SORTED_SET() {

				public boolean contains( final KEY_TYPE k ) { return containsKey( k ); }

				public int size() { return ABSTRACT_SORTED_MAP.this.size(); }

				public KEY_ITERATOR KEY_ITERATOR_METHOD() {
					return new KEY_ABSTRACT_BIDI_ITERATOR() {
							final BidirectionalIterator i = (BidirectionalIterator)entrySet().iterator();

							public KEY_TYPE NEXT_KEY() { return ((MAP.Entry)i.next()).ENTRY_GET_KEY(); };

							public KEY_TYPE PREV_KEY() { return ((MAP.Entry)i.previous()).ENTRY_GET_KEY(); };

							public boolean hasNext() { return i.hasNext(); }

							public boolean hasPrevious() { return i.hasPrevious(); }
						};
				}


				public Comparator comparator() { return ABSTRACT_SORTED_MAP.this.comparator(); }

				public KEY_TYPE FIRST() { return ABSTRACT_SORTED_MAP.this.FIRST_KEY(); }

				public KEY_TYPE LAST() { return ABSTRACT_SORTED_MAP.this.LAST_KEY(); }

				public STD_SORTED_SET headSet( final KEY_TYPE to  ) { return (STD_SORTED_SET)ABSTRACT_SORTED_MAP.this.headMap( to ).keySet(); }

				public STD_SORTED_SET tailSet( final KEY_TYPE from ) { return  (STD_SORTED_SET)ABSTRACT_SORTED_MAP.this.tailMap( from ).keySet(); }

				public STD_SORTED_SET subSet( final KEY_TYPE from, final KEY_TYPE to ) { return  (STD_SORTED_SET)ABSTRACT_SORTED_MAP.this.subMap( from, to ).keySet(); }
			};
	}

}

// Local Variables:
// mode: jde
// tab-width: 4
// End:
