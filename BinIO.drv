package it.unimi.dsi.fastutil.io;

/*		 
 * Copyright (C) 2004 Sebastiano Vigna 
 *
 *  This program is free software; you can redistribute it and/or modify it
 *  under the terms of the GNU General Public License as published by the Free
 *  Software Foundation; either version 2 of the License, or (at your option)
 *  any later version.
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *  or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 *  for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *
 */

import java.io.*;
import it.unimi.dsi.fastutil.bytes.*;
import it.unimi.dsi.fastutil.shorts.*;
import it.unimi.dsi.fastutil.chars.*;
import it.unimi.dsi.fastutil.ints.*;
import it.unimi.dsi.fastutil.longs.*;
import it.unimi.dsi.fastutil.floats.*;
import it.unimi.dsi.fastutil.doubles.*;

/** Provides static methods to perform easily binary I/O.
 *
 * <P>This class fills a gap in the Java API: a natural operation on sequences
 * of primitive elements is to load or store them in binary form using the
 * {@link DataInput} conventions.  This method is much more flexible than
 * storing arrays as objects, as it allows, for partial load, partial
 * store, and makes it easy to read the resulting files from other languages.
 * 
 * <P>For each primitive type, this class provides methods that read elements
 * from a {@link DataInput} or from a filename (which will be opened using a
 * buffer of {@link #BUFFER_SIZE} bytes) into an array. Analogously, there are
 * methods that store the content of an array (fragment) or the elements
 * returned by an iterator to a {@link DataOutput} or to a given filename.
 */

public class BinIO {

	private BinIO() {}

	/** The size of the buffer used for all I/O on files. */
	final public static int BUFFER_SIZE = 64 * 1024;

#include "java/it/unimi/dsi/fastutil/io/ByteBinIOFragment.h"
#include "java/it/unimi/dsi/fastutil/io/ShortBinIOFragment.h"
#include "java/it/unimi/dsi/fastutil/io/CharBinIOFragment.h"
#include "java/it/unimi/dsi/fastutil/io/IntBinIOFragment.h"
#include "java/it/unimi/dsi/fastutil/io/LongBinIOFragment.h"
#include "java/it/unimi/dsi/fastutil/io/FloatBinIOFragment.h"
#include "java/it/unimi/dsi/fastutil/io/DoubleBinIOFragment.h"

}

// Local Variables:
// mode: jde
// tab-width: 4
// End:
