/*		 
 * fastutil: Fast & compact type-specific collections for Java
 *
 * Copyright (C) 2002, 2003 Sebastiano Vigna 
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */

package PACKAGE;

/**  An abstract class facilitating the creation of type-specific {@linkplain it.unimi.dsi.fastutil.BidirectionalIterator bidirectional iterators}.
 *
 * <P>To create a type-specific bidirectional iterator, besides what is needed
 * for an iterator you need both a method returning the previous element as
 * primitive type and a method returning the previous element as an
 * object. However, if you inherit from this class you need just one (anyone).
 *
 * @see java.util.Iterator
 */

public abstract class KEY_ABSTRACT_BIDI_ITERATOR extends KEY_ABSTRACT_ITERATOR implements KEY_BIDI_ITERATOR {

	protected KEY_ABSTRACT_BIDI_ITERATOR() {};

#if ! #keyclass(Object) && ! #keyclass(Reference)

	/** This method just invokes the generic version. */
	public KEY_TYPE PREV_KEY() { return KEY2TYPE( previous() ); }

	/** This method just invokes the type-specific version. */
	public Object previous() { return KEY2OBJ( PREV_KEY() ); }

#endif

	/** This method just iterates {@link #previous()} for
	 * at most <code>n</code> times, stopping if {@link
	 * #hasPrevious()} becomes false. */
	public int back( final int n ) { 
		int i = n;
		while( i-- != 0 && hasPrevious() ) PREV_KEY(); 
		return n - i - 1;
	}

}

// Local Variables:
// mode: jde
// tab-width: 4
// End:
